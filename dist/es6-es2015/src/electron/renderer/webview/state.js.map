{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/webview/state.ts"],"names":[],"mappings":";;AAOA,uCAAkC;AAgElC,IAAI,sBAA2C,CAAC;AAChD,SAAgB,qBAAqB;IACjC,IAAI,OAAO,sBAAsB,KAAK,WAAW,EAAE;QAC/C,sBAAsB,GAAG,iBAAM,CAAC,GAAG,CAAC,6BAA6B,EAAE,CAAC;KAQvE;IACD,OAAO,sBAAsB,CAAC;AAClC,CAAC;AAZD,sDAYC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { remote } from \"electron\";\n\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\n\nimport { IEventPayload_R2_EVENT_READING_LOCATION } from \"../../common/events\";\nimport { IStringMap } from \"../common/querystring\";\n\nexport interface IReadiumElectronWebviewWindowState {\n    // init'ed from  win.location.search immediately in preload.js\n    // updated in R2_EVENT_SCROLLTO IPC renderer event\n    urlQueryParams: IStringMap | undefined;\n\n    hashElement: Element | null;\n    locationHashOverride: Element | undefined;\n    locationHashOverrideInfo: IEventPayload_R2_EVENT_READING_LOCATION | undefined;\n\n    isFixedLayout: boolean;\n    fxlViewportWidth: number;\n    fxlViewportHeight: number;\n    fxlViewportScale: number;\n\n    DEBUG_VISUALS: boolean;\n\n    ttsClickEnabled: boolean;\n}\nexport interface IReadiumElectronWebviewWindow extends Window {\n    READIUM2: IReadiumElectronWebviewWindowState;\n}\n\nexport interface IReadiumElectronWebviewState {\n    id: number;\n    link: Link | undefined;\n    forceRefresh?: boolean;\n}\nexport interface IReadiumElectronWebview extends Electron.WebviewTag {\n    READIUM2: IReadiumElectronWebviewState;\n}\n\nexport interface IReadiumElectronBrowserWindowState {\n    publication: Publication;\n    publicationURL: string;\n\n    domRootElement: HTMLElement;\n    domSlidingViewport: HTMLElement;\n\n    DEBUG_VISUALS: boolean;\n    ttsClickEnabled: boolean;\n\n    preloadScriptPath: string;\n\n    getActiveWebView: () => IReadiumElectronWebview | undefined;\n    destroyActiveWebView: () => void;\n    createActiveWebView: () => void;\n\n    enableScreenReaderAccessibilityWebViewHardRefresh: boolean;\n}\n\nexport interface IWithReadiumElectronBrowserWindowState {\n    READIUM2: IReadiumElectronBrowserWindowState;\n}\nexport type TWindow = typeof window;\nexport type IReadiumElectronBrowserWindow = TWindow & IWithReadiumElectronBrowserWindowState;\n\nlet _isScreenReaderMounted: boolean | undefined;\nexport function isScreenReaderMounted() {\n    if (typeof _isScreenReaderMounted === \"undefined\") {\n        _isScreenReaderMounted = remote.app.isAccessibilitySupportEnabled();\n\n        // Instead of dynamically updating this state via the app event,\n        // the detection of mounted screen reader is done at every launch of a reader window.\n        //\n        // app.on(\"accessibility-support-changed\", (_ev, accessibilitySupportEnabled) => {\n        //     _isScreenReaderMounted = accessibilitySupportEnabled;\n        // });\n    }\n    return _isScreenReaderMounted;\n}\n"]}