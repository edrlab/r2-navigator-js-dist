{"version":3,"file":"popoutImages.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/webview/popoutImages.ts"],"names":[],"mappings":";;;AAOA,gDAE6B;AAC7B,yDAAwE;AAGxE,SAAgB,WAAW,CACvB,GAAkC,EAClC,OAAyB,EACzB,cACoG,EACpG,oDAAkE,EAClE,iDAAwE;IASxE,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAI,CAAC,OAAO,EAAE;QACV,OAAO;KACV;IAED,MAAM,cAAc,GAAG,wBAAwB;QAC3C,iFAAiF;QACjF,+CAA+C;QAC/C,wDAAwD;QACxD,wKAAwK;QACxK,mFAAmF;QACnF,iFAAiF,CAAC;IAGtF,MAAM,OAAO,GAAG;;aAEP,oCAA2B,IAAI,mCAA0B;;;;;;UAM5D,cAAc;eACT,OAAO;;OAEf,CAAC;IAMJ,MAAM,GAAG,GAAG,oDAAoD,EAAE,CAAC;IAInE,IAAI,CAAE,GAAW,CAAC,wBAAwB,EAAE;QAEvC,GAAW,CAAC,wBAAwB,GAAG,GAAG,EAAE,GAAG,IAAA,gCAAiB,EAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;KACtF;IAED,SAAS,cAAc,CAAC,EAA2B;QAE/C,IAAI,EAAE,EAAE;YACJ,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;SAC7C;aAAM;YACH,iDAAiD,CAAC,GAAG,CAAC,CAAC;SAC1D;QAED,UAAU,CAAC,GAAG,EAAE;YACZ,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IACD,MAAM,GAAG,GAAG,IAAI,0BAAW,CAAC,OAAO,CAAC,aAAyB,EAAE,OAAO,EAAE,cAAc,EAAE,+BAAsB,EAAE,KAAK,CAAC,CAAC;IACvH,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC;AArED,kCAqEC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport {\n    CSS_CLASS_NO_FOCUS_OUTLINE, POPOUTIMAGE_CONTAINER_CLASS, TTS_POPUP_DIALOG_CLASS,\n} from \"../../common/styles\";\nimport { PopupDialog, closePopupDialogs } from \"../common/popup-dialog\";\nimport { IReadiumElectronWebviewWindow } from \"./state\";\n\nexport function popoutImage(\n    win: IReadiumElectronWebviewWindow,\n    element: HTMLImageElement,\n    focusScrollRaw:\n        (el: HTMLOrSVGElement, doFocus: boolean, animate: boolean, domRect: DOMRect | undefined) => void,\n    ensureTwoPageSpreadWithOddColumnsIsOffsetTempDisable: () => number,\n    ensureTwoPageSpreadWithOddColumnsIsOffsetReEnable: (val: number) => void,\n) {\n    // const documant = win.document || element.ownerDocument as Document;\n    // if (!documant.documentElement\n    //     || documant.documentElement.classList.contains(ROOT_CLASS_NO_POPOUTIMAGES)\n    // ) {\n    //     return false;\n    // }\n\n    const imgHref = element.src;\n    if (!imgHref) {\n        return;\n    }\n\n    const onclickhandler = \"onclick=\\\"javascript: \" +\n        \"if (window.event.shiftKey || this.r2ImgScale &amp;&amp; this.r2ImgScale !== 1) \" +\n        \"{ this.r2ImgScale = !window.event.shiftKey ? \" +\n        \"1 : (this.r2ImgScale ? (this.r2ImgScale + 0.5) : 1.5);\" +\n        \"this.style.setProperty('margin-top', '0', 'important'); this.style.setProperty('margin-left', '0', 'important'); this.style.transform='scale('+this.r2ImgScale+')'; } \" +\n        \"else if (window.readiumClosePopupDialogs) { window.readiumClosePopupDialogs(); } \" +\n        \"window.event.preventDefault(); window.event.stopPropagation(); return false; \\\"\";\n\n    // tslint:disable-next-line:max-line-length\n    const htmltxt = `\n<div\n    class=\"${POPOUTIMAGE_CONTAINER_CLASS} ${CSS_CLASS_NO_FOCUS_OUTLINE}\"\n    tabindex=\"0\"\n    autofocus=\"autofocus\"\n    onclick=\"javascript: window.readiumClosePopupDialogs &amp;&amp; window.readiumClosePopupDialogs()\"\n    >\n    <img\n        ${onclickhandler}\n        src=\"${imgHref}\"\n    />\n</div>`;\n\n// ${win.document.documentElement.classList.contains(ROOT_CLASS_FIXED_LAYOUT) ?\n//     \"style=\\\"transform-origin: 0px 0px;transform: scale(var(--r2_fxl_scale));\\\"\" :\n//     \"\"}\n\n    const val = ensureTwoPageSpreadWithOddColumnsIsOffsetTempDisable();\n\n    // HACKY!\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (!(win as any).readiumClosePopupDialogs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (win as any).readiumClosePopupDialogs = () => { closePopupDialogs(win.document); };\n    }\n\n    function onDialogClosed(el: HTMLOrSVGElement | null) {\n\n        if (el) {\n            focusScrollRaw(el, true, true, undefined);\n        } else {\n            ensureTwoPageSpreadWithOddColumnsIsOffsetReEnable(val);\n        }\n\n        setTimeout(() => {\n            pop.dialog.remove();\n        }, 50);\n    }\n    const pop = new PopupDialog(element.ownerDocument as Document, htmltxt, onDialogClosed, TTS_POPUP_DIALOG_CLASS, false);\n    pop.show(element);\n}\n"]}