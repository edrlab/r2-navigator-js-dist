{"version":3,"file":"dom.js","sourceRoot":"","sources":["../../../../../src/electron/renderer/dom.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nimport { Locator } from \"@r2-shared-js/models/locator\";\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { debounce } from \"debounce\";\nimport * as debug_ from \"debug\";\n\nimport {\n    IEventPayload_R2_EVENT_DEBUG_VISUALS,\n    IEventPayload_R2_EVENT_WEBVIEW_KEYDOWN,\n    R2_EVENT_DEBUG_VISUALS,\n    R2_EVENT_READIUMCSS,\n    R2_EVENT_WEBVIEW_KEYDOWN,\n} from \"../common/events\";\nimport {\n    R2_SESSION_WEBVIEW,\n} from \"../common/sessions\";\nimport {\n    URL_PARAM_DEBUG_VISUALS,\n} from \"./common/url-params\";\nimport { ENABLE_WEBVIEW_RESIZE } from \"./common/webview-resize\";\nimport { highlightsHandleIpcMessage } from \"./highlight\";\nimport {\n    getCurrentReadingLocation,\n    handleLinkLocator,\n    locationHandleIpcMessage,\n    navLeftOrRight,\n    shiftWebview,\n} from \"./location\";\nimport { ttsClickEnable, ttsHandleIpcMessage } from \"./readaloud\";\nimport { __computeReadiumCssJsonMessage } from \"./readium-css\";\nimport { IReadiumElectronBrowserWindow, IReadiumElectronWebview } from \"./webview/state\";\n\n// import { registerProtocol } from \"@r2-navigator-js/electron/renderer/common/protocol\";\n// registerProtocol();\n\n// const CLASS_POS_RIGHT = \"r2_posRight\";\n// const CLASS_SHIFT_LEFT = \"r2_shiftedLeft\";\n// const CLASS_ANIMATED = \"r2_animated\";\n\nconst ELEMENT_ID_SLIDING_VIEWPORT = \"r2_navigator_sliding_viewport\";\n\nconst debug = debug_(\"r2:navigator#electron/renderer/index\");\n\n// const queryParams = getURLQueryParams();\n\n// // tslint:disable-next-line:no-string-literal\n// const publicationJsonUrl = queryParams[\"pub\"];\n// debug(publicationJsonUrl);\n// const publicationJsonUrl_ = publicationJsonUrl.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL) ?\n//     convertCustomSchemeToHttpUrl(publicationJsonUrl) : publicationJsonUrl;\n// debug(publicationJsonUrl_);\n// const pathBase64 = publicationJsonUrl_.replace(/.*\\/pub\\/(.*)\\/manifest.json/, \"$1\");\n// debug(pathBase64);\n// const pathDecoded = new Buffer(decodeURIComponent(pathBase64), \"base64\").toString(\"utf8\");\n// debug(pathDecoded);\n// const pathFileName = pathDecoded.substr(\n//     pathDecoded.replace(/\\\\/g, \"/\").lastIndexOf(\"/\") + 1,\n//     pathDecoded.length - 1);\n// debug(pathFileName);\n\n// // tslint:disable-next-line:no-string-literal\n// const lcpHint = queryParams[\"lcpHint\"];\n\nexport function readiumCssOnOff() {\n\n    const loc = getCurrentReadingLocation();\n\n    const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n    if (activeWebView) {\n        const payload1 = __computeReadiumCssJsonMessage(activeWebView.READIUM2.link);\n\n        if (activeWebView.style.transform !== \"none\") {\n            activeWebView.send(\"R2_EVENT_HIDE\");\n\n            setTimeout(() => {\n                shiftWebview(activeWebView, 0, undefined); // reset\n                activeWebView.send(R2_EVENT_READIUMCSS, payload1);\n            }, 10);\n        } else {\n            activeWebView.send(R2_EVENT_READIUMCSS, payload1);\n        }\n    }\n\n    if (loc) {\n        setTimeout(() => {\n            handleLinkLocator(loc.locator);\n        }, 60);\n    }\n}\n\nlet _webview1: IReadiumElectronWebview;\n\nexport function installNavigatorDOM(\n    publication: Publication,\n    publicationURL: string,\n    rootHtmlElementID: string,\n    preloadScriptPath: string,\n    location: Locator | undefined) {\n\n    const domRootElement = document.getElementById(rootHtmlElementID) as HTMLElement;\n    if (!domRootElement) {\n        debug(\"!rootHtmlElementID ???\");\n        return;\n    }\n\n    const domSlidingViewport = document.createElement(\"div\");\n    domSlidingViewport.setAttribute(\"id\", ELEMENT_ID_SLIDING_VIEWPORT);\n    domSlidingViewport.setAttribute(\"style\", \"display: block; position: absolute; left: 0; width: 200%; \" +\n        \"top: 0; bottom: 0; margin: 0; padding: 0; box-sizing: border-box; background: white; overflow: hidden;\");\n\n    (window as IReadiumElectronBrowserWindow).READIUM2 = {\n        DEBUG_VISUALS: false,\n        domRootElement,\n        domSlidingViewport,\n        getActiveWebView: (): IReadiumElectronWebview => {\n            return _webview1;\n\n            // let activeWebView: IReadiumElectronWebview;\n\n            // const slidingViewport = document.getElementById(ELEMENT_ID_SLIDING_VIEWPORT) as HTMLElement;\n            // if (slidingViewport.classList.contains(CLASS_SHIFT_LEFT)) {\n            //     if (_webview1.classList.contains(CLASS_POS_RIGHT)) {\n            //         activeWebView = _webview1;\n            //     } else {\n            //         activeWebView = _webview2;\n            //     }\n            // } else {\n            //     if (_webview2.classList.contains(CLASS_POS_RIGHT)) {\n            //         activeWebView = _webview1;\n            //     } else {\n            //         activeWebView = _webview2;\n            //     }\n            // }\n\n            // return activeWebView;\n        },\n        publication,\n        publicationURL,\n        ttsClickEnabled: false,\n    };\n\n    if (IS_DEV) {\n        debug(\"||||||++||||| installNavigatorDOM: \", JSON.stringify(location));\n\n        const debugVisualz = (window.localStorage &&\n            window.localStorage.getItem(URL_PARAM_DEBUG_VISUALS) === \"true\") ? true : false;\n        debug(\"debugVisuals GET: \", debugVisualz);\n\n        (window as IReadiumElectronBrowserWindow).READIUM2.DEBUG_VISUALS = debugVisualz;\n\n        (window as any).READIUM2.debug = (debugVisuals: boolean) => {\n            debug(\"debugVisuals SET: \", debugVisuals);\n            (window as IReadiumElectronBrowserWindow).READIUM2.DEBUG_VISUALS = debugVisuals;\n\n            const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n            if (activeWebView) {\n                const payload: IEventPayload_R2_EVENT_DEBUG_VISUALS\n                    = { debugVisuals };\n                activeWebView.send(R2_EVENT_DEBUG_VISUALS, payload);\n            }\n            if (window.localStorage) {\n                window.localStorage.setItem(URL_PARAM_DEBUG_VISUALS, debugVisuals ? \"true\" : \"false\");\n            }\n            setTimeout(() => {\n                const loc = getCurrentReadingLocation();\n                if (loc) {\n                    handleLinkLocator(loc.locator);\n                }\n            }, 100);\n        };\n\n        (window as any).READIUM2.debugItems =\n            (cssSelector: string, cssClass: string, cssStyles: string | undefined) => {\n\n                if (cssStyles) {\n                    debug(\"debugVisuals ITEMS: \", `${cssSelector} --- ${cssClass} --- ${cssStyles}`);\n                }\n\n                const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n                // let delay = 0;\n                // if (!(window as IReadiumElectronBrowserWindow).READIUM2.DEBUG_VISUALS) {\n                //     (window as any).READIUM2.debug(true);\n                //     delay = 200;\n                // }\n                // setTimeout(() => {\n                //     if (activeWebView) {\n                //         const payload: IEventPayload_R2_EVENT_DEBUG_VISUALS\n                //             = { debugVisuals: true, cssSelector, cssClass, cssStyles };\n                //         activeWebView.send(R2_EVENT_DEBUG_VISUALS, payload);\n                //     }\n                // }, delay);\n\n                if (activeWebView) {\n                    const d = (window as IReadiumElectronBrowserWindow).READIUM2.DEBUG_VISUALS;\n                    const payload: IEventPayload_R2_EVENT_DEBUG_VISUALS\n                        = { debugVisuals: d, cssSelector, cssClass, cssStyles };\n                    activeWebView.send(R2_EVENT_DEBUG_VISUALS, payload);\n                }\n            };\n    }\n\n    _webview1 = createWebView(preloadScriptPath);\n    _webview1.READIUM2 = {\n        id: 1,\n        link: undefined,\n    };\n    _webview1.setAttribute(\"id\", \"webview1\");\n\n    domSlidingViewport.appendChild(_webview1 as Node);\n    // slidingViewport.appendChild(_webview2 as Node);\n\n    domRootElement.appendChild(domSlidingViewport);\n\n    // if (isRTL()) {\n    //     _webview1.classList.add(CLASS_POS_RIGHT);\n    //     _webview1.style.left = \"50%\";\n    // }\n    // else {\n    //     _webview2.classList.add(CLASS_POS_RIGHT);\n    //     _webview2.style.left = \"50%\";\n    // }\n\n    setTimeout(() => {\n        handleLinkLocator(location);\n    }, 100);\n}\n\nfunction createWebView(preloadScriptPath: string): IReadiumElectronWebview {\n\n    // Unfortunately the Chromium web inspector crashes when closing preload :(\n    // Also, the debugger fails to open the sourcemaps (maybe related issue?)\n    // process.stderr.write(\"\\n####\\n\" + preloadScriptPath + \"\\n####\\n\");\n    // TODO: what are the critical features needed from Node context\n    // that justify using webview.preload? Can we instead use regular DOM code?\n    // The ReadiumCSS injection is now streamer-based (best performance / timing)\n    // and we can use postMessage instead of Electron IPC.\n    // Also, preload really does most of its processing once DOM-ready.\n    // Perhaps the main problem would be exposing the internal logic of navigator\n    // into EPUB content documents? (preload is good for isolating app code)\n\n    const wv = document.createElement(\"webview\");\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/electron/electron/blob/master/docs/tutorial/security.md#3-enable-context-isolation-for-remote-content\n    wv.setAttribute(\"webpreferences\",\n        \"nodeIntegration=0, nodeIntegrationInWorker=0, sandbox=0, javascript=1, \" +\n        \"contextIsolation=0, webSecurity=1, allowRunningInsecureContent=0\");\n    wv.setAttribute(\"partition\", R2_SESSION_WEBVIEW);\n\n    const publicationURL_ = (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL;\n    if (publicationURL_) {\n        // const ref = publicationURL_.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\") ?\n        //     publicationURL_ : convertHttpUrlToCustomScheme(publicationURL_);\n        wv.setAttribute(\"httpreferrer\", publicationURL_);\n    }\n    wv.setAttribute(\"style\", \"display: flex; margin: 0; padding: 0; box-sizing: border-box; \" +\n        \"position: absolute; left: 0; width: 50%; bottom: 0; top: 0;\");\n    wv.setAttribute(\"preload\", preloadScriptPath); // \"file://\"\n\n    if (ENABLE_WEBVIEW_RESIZE) {\n        wv.setAttribute(\"disableguestresize\", \"\");\n    }\n\n    setTimeout(() => {\n        wv.removeAttribute(\"tabindex\");\n    }, 500);\n\n    wv.addEventListener(\"dom-ready\", () => {\n        // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webcontents\n        // wc.openDevTools({ mode: \"detach\" });\n        wv.clearHistory();\n\n        if ((window as IReadiumElectronBrowserWindow).READIUM2) {\n            ttsClickEnable((window as IReadiumElectronBrowserWindow).READIUM2.ttsClickEnabled);\n        }\n    });\n\n    wv.addEventListener(\"ipc-message\", (event: Electron.IpcMessageEvent) => {\n        const webview = event.currentTarget as IReadiumElectronWebview;\n        const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n        if (webview !== activeWebView) {\n            return;\n        }\n\n        if (event.channel === R2_EVENT_WEBVIEW_KEYDOWN) {\n            const payload = event.args[0] as IEventPayload_R2_EVENT_WEBVIEW_KEYDOWN;\n            if (payload.keyCode === 37) { // left\n                navLeftOrRight(true);\n            } else if (payload.keyCode === 39) { // right\n                navLeftOrRight(false);\n            }\n        } else if (!highlightsHandleIpcMessage(event.channel, event.args, webview) &&\n            !ttsHandleIpcMessage(event.channel, event.args, webview) &&\n            !locationHandleIpcMessage(event.channel, event.args, webview)) {\n\n            debug(\"webview1 ipc-message\");\n            debug(event.channel);\n        }\n    });\n\n    return wv as IReadiumElectronWebview;\n}\nif (ENABLE_WEBVIEW_RESIZE) {\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webcontents\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webview\n    // wv.setAttribute(\"disableguestresize\", \"\");\n    const adjustResize = (webview: IReadiumElectronWebview) => {\n        // https://javascript.info/size-and-scroll\n        // offsetW/H: excludes margin, includes border, scrollbar, padding.\n        // clientW/H: excludes margin, border, scrollbar, includes padding.\n        // scrollW/H: like client, but includes hidden (overflow) areas\n        const width = webview.clientWidth;\n        const height = webview.clientHeight;\n        const wc = webview.getWebContents();\n        if (wc && (wc as any).setSize && width && height) {\n            (wc as any).setSize({ // wc is WebContents, works in Electron < 3.0\n                normal: {\n                    height,\n                    width,\n                },\n            });\n        }\n    };\n    const onResizeDebounced = debounce(() => {\n        const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n        if (activeWebView) {\n            adjustResize(activeWebView);\n        }\n    }, 200);\n    window.addEventListener(\"resize\", () => {\n        // const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n        // if (!isFixedLayout(activeWebView.READIUM2.link)) {\n        //     if (_rootHtmlElement) {\n        //         _rootHtmlElement.dispatchEvent(new Event(DOM_EVENT_HIDE_VIEWPORT));\n        //     }\n        // }\n        onResizeDebounced();\n    });\n}\n"]}