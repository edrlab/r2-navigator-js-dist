{"version":3,"file":"console-redirect.js","sourceRoot":"","sources":["../../../../../src/electron/renderer/console-redirect.ts"],"names":[],"mappings":";;AAEA,6BAA6B;AAK7B,wCAAwC;AAGxC,MAAM,qBAAqB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC/D,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,CAAC,EAAE;IACxD,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CACvC;AAmBD,SAAgB,eAAe,CAC3B,cAAsB,EACtB,MAA0B,EAC1B,MAA0B,EAC1B,sBAA+B;IAK/B,MAAM,SAAS,GAAG,MAAM,IAAI,MAAM,CAAC;IACnC,IAAI,KAAuB,CAAC;IAC5B,IAAI,cAAc,IAAI,SAAS,EAAE;QAC7B,KAAK,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;QAElC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YAC3B,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAY1D,CAAC,CAAC;KACL;IAED,MAAM,eAAe,GAAG,EAAE,CAAC;IAE3B,qBAAqB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE;QAClD,MAAM,eAAe,GAAI,OAAe,CAAC,mBAAmB,CAAiB,CAAC;QAE7E,eAAuB,CAAC,mBAAmB,CAAC,GAAG,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7E,OAAe,CAAC,mBAAmB,CAAC,GAAG,UAAS,GAAG,IAAW;YAG3D,IAAI,KAAK,EAAE;gBACP,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC3B;iBAAM;gBACH,MAAM,WAAW,GAAG,CAAC,mBAAmB,KAAK,OAAO,IAAI,mBAAmB,KAAK,MAAM,CAAC;oBACnF,CAAC,CAAC,MAAM;oBACR,CAAC,CAAC,MAAM,CAAC;gBACb,IAAI,WAAW,EAAE;oBACb,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;iBAW3D;aACJ;YAED,IAAI,sBAAsB,EAAE;gBACxB,OAAS,eAAuB,CAAC,mBAAmB,CAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC5F;QACL,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,EAAE;QACR,qBAAqB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE;YACjD,OAAe,CAAC,mBAAmB,CAAC,GAAI,eAAuB,CAAC,mBAAmB,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAxED,0CAwEC","sourcesContent":["// https://developer.chrome.com/devtools/docs/blackboxing\n\nimport * as util from \"util\";\n\n// used for TypeScript typings (defaults to \"debug/src/browser\" when Electron renderer process)\nimport * as debugz from \"debug\";\n\nimport * as debugNode from \"debug/node\";\n// import * as debugBrowser from \"debug/src/browser\";\n\nconst _consoleFunctionNames = [\"error\", \"info\", \"log\", \"warn\"];\nif (console.debug && (typeof console.debug === \"function\")) {\n    _consoleFunctionNames.push(\"debug\");\n}\n\n// let logz = function(...args: any[]) {\n//     // if (Function.prototype.bind) {\n//     //      logz = Function.prototype.bind.call(console.log, console, \"LOGz: \");\n//     // } else {\n//     //     logz = function(...args: any[]) {\n//     //         Function.prototype.apply.call(console.log, console, args);\n//     //     };\n//     // }\n//     logz = console.log.bind(console, \"LOGz: \");\n//     logz.apply(console, args);\n// };\n\n// const logz_ = console.log.bind(console, \"LOGz: \");\n// const logz = function(...args: any[]) {\n//     logz_.apply(console, args);\n// };\n\nexport function consoleRedirect(\n    debugNamespace: string,\n    stdout: NodeJS.WriteStream,\n    stderr: NodeJS.WriteStream,\n    printInOriginalConsole: boolean): () => void {\n\n    // logz(\"DEBUG test LOGz\");\n    // debugBrowser(debugNamespace + \"_TEST\")(\"DEBUG test zzz\");\n\n    const outStream = stderr || stdout;\n    let debug: debugz.IDebugger;\n    if (debugNamespace && outStream) {\n        debug = debugNode(debugNamespace);\n        // debug.log = console.log.bind(console);\n        debug.log = (...args: any[]) => {\n            outStream.write(util.format.apply(util, args) + \"\\n\");\n\n            // const stringArgs: string[] = args.map((arg: any) => {\n            //     if (typeof arg !== \"undefined\") {\n            //         // // breakLength: 100  maxArrayLength: undefined\n            //         // return util.inspect(arg,\n            //         //         { showHidden: false, depth: 1000, colors: true, customInspect: true });\n            //         return arg;\n            //     }\n            //     return \"undefined\";\n            // });\n            // outStream.write(stringArgs.join(\" \") + \"\\n\");\n        };\n    }\n\n    const originalConsole = {};\n\n    _consoleFunctionNames.forEach((consoleFunctionName) => {\n        const consoleFunction = (console as any)[consoleFunctionName] as (() => void);\n\n        (originalConsole as any)[consoleFunctionName] = consoleFunction.bind(console);\n\n        (console as any)[consoleFunctionName] = function(...args: any[]): any {\n            // [].slice.call(arguments) or Array.prototype.slice.call(arguments) or Array.from(arguments)\n\n            if (debug) {\n                debug.apply(this, args);\n            } else {\n                const writeStream = (consoleFunctionName === \"error\" || consoleFunctionName === \"warn\")\n                    ? stderr\n                    : stdout;\n                if (writeStream) {\n                    writeStream.write(util.format.apply(util, args) + \"\\n\");\n\n                    // const stringArgs: string[] = args.map((arg: any) => {\n                    //     if (typeof arg !== \"undefined\") {\n                    //         // breakLength: 100  maxArrayLength: undefined\n                    //         return util.inspect(arg,\n                    //                 { showHidden: false, depth: 1000, colors: true, customInspect: true });\n                    //     }\n                    //     return \"undefined\";\n                    // });\n                    // writeStream.write(stringArgs.join(\" \") + \"\\n\");\n                }\n            }\n\n            if (printInOriginalConsole) {\n                return ((originalConsole as any)[consoleFunctionName] as (() => void)).apply(this, args);\n            }\n        };\n    });\n\n    return () => {\n        _consoleFunctionNames.forEach((consoleFunctionName) => {\n            (console as any)[consoleFunctionName] = (originalConsole as any)[consoleFunctionName];\n        });\n    };\n}\n"]}