{"version":3,"file":"console-redirect.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/common/console-redirect.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\n// https://github.com/visionmedia/debug/blob/master/src/index.js\n// typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs\n// (defaults to \"debug/src/browser\" when Electron renderer process)\nimport * as debugBrowser from \"debug\";\n// https://github.com/visionmedia/debug/blob/master/src/node.js\nimport * as debugNode from \"debug/src/node\"; // used for shell output (print to stderr/out stream)\nimport * as util from \"util\";\n\n// https://github.com/visionmedia/debug/blob/master/src/common.js\n// import * as debugCommon from \"debug/src/common\";\n\n// https://github.com/visionmedia/debug/blob/master/src/browser.js\n// import * as debugBrowser from \"debug/src/browser\";\n\n// BLACKBOXING:\n// console-redirect.js\n// debug/src/browser.js\n// debug/src/common.js\n// https://developer.chrome.com/devtools/docs/blackboxing\n\nexport function consoleRedirect(\n    debugNamespace: string,\n    stdout: NodeJS.WriteStream,\n    stderr: NodeJS.WriteStream,\n    printInOriginalConsole: boolean): () => void {\n\n    const _consoleFunctionNames = [\"error\", \"info\", \"log\", \"warn\"];\n    if (console.debug && (typeof console.debug === \"function\")) {\n        _consoleFunctionNames.push(\"debug\");\n    }\n\n    const outStream = stderr || stdout;\n    const debugNodeInstance: debug.IDebugger = debugNode(debugNamespace + \"_\");\n\n    // debug() default is:\n    // process.stderr.write(util.format(...args) + '\\n');\n    // https://github.com/visionmedia/debug/blob/master/src/node.js#L190\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function debugLog(this: any, ...args: any[]): void {\n        // const prefix = (this === debugNodeInstance) ? \"i\" :\n        //     ((this === debugNode) ? \"g\" :\n        //     ((this === debugBrowser) ? \"b\" : \"?\"));\n\n        outStream.write(// prefix +\n            // eslint-disable-next-line prefer-spread\n            util.format.apply(util, args) + \"\\n\");\n\n        // process.stderr.write(util.inspect(this,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n        // handleLog(args);\n    }\n\n    // https://github.com/visionmedia/debug/blob/master/src/common.js#L113\n    // const logFn = self.log || createDebug.log;\n    // (debugNode as any).log = debugLog.bind(debugNode); // global\n    debugNodeInstance.log = debugLog.bind(debugNodeInstance); // takes precedence\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function processConsoleFunctionCall(this: Console, ...args: any[]): void {\n\n        // process.stderr.write(\"PROCESSING... \" + util.inspect(args,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n\n        // Attempt to reverse-parse the web console format in the raw message,\n        // so it can be dumped into the shell console via the debug instance:\n        let processed = false;\n        if (args.length >= 4) {\n            if (typeof args[0] === \"string\" &&\n                args[0].startsWith(\"%c\") &&\n                args[0].length >= 3) {\n                const c2i = args[0].indexOf(\" %c\");\n                if (c2i >= 3) {\n                    const ns = args[0].substr(2, c2i - 2);\n                    const lci = args[0].lastIndexOf(\"%c +\");\n                    if (lci > c2i) {\n                        const d = c2i + 3;\n                        const l = lci - d; // args[0].length - d - (args[0].length - lci)\n                        const msg = args[0].substr(d, l);\n                        const count = (msg.replace(/%%/g, \"\").match(/%[Oosdjc]/g) || []).length;\n                        const newAr = [ msg ];\n                        if (count > 0) {\n                            for (let j = 0; j < count; j++) {\n                                newAr.push(args[j + 3]);\n                            }\n                        }\n                        const k = count + 3 + 1;\n                        if (k < args.length) {\n                            for (let j = k; j < args.length; j++) {\n                                newAr.push(args[j]);\n                            }\n                        }\n\n                        // process.stderr.write(\"PARSED: \" + util.inspect(newAr,\n                        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n\n                        // Temporary debug namespace switch, so that the existing debug instance\n                        // can be used to dump the raw message into the shell console:\n                        const nsp = debugNodeInstance.namespace;\n                        debugNodeInstance.namespace = ns;\n                        debugNodeInstance.apply(debugNodeInstance, newAr);\n                        debugNodeInstance.namespace = nsp;\n                        processed = true;\n                    }\n                }\n            }\n        }\n        // Message cannot be reverse-parsed from web console format\n        // => dump it \"as is\" into the shell console:\n        if (!processed) {\n            // process.stderr.write(\"FALLBACK: \" + util.inspect(args,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n\n            debugNodeInstance.apply(debugNodeInstance, args);\n            // outStream.write(util.format.apply(util, args) + \"\\n\");\n        }\n    }\n    // processConsoleFunctionCall.bind(console);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (debugBrowser as any).log = (...args: any[]): void => {\n        processConsoleFunctionCall.apply(console, args);\n\n        if (printInOriginalConsole) {\n            const consoleFunctionName = \"log\";\n            const originalConsoleFunction =\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ((originalConsole as any)[consoleFunctionName] as ((...args: any[]) => void));\n            // process.stderr.write(consoleFunctionName + \" -- \" + util.inspect(originalConsoleFunction,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n            originalConsoleFunction.apply(console, args);\n        }\n    };\n\n    const originalConsole = {};\n\n    _consoleFunctionNames.forEach((consoleFunctionName) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const consoleFunction = (console as any)[consoleFunctionName] as ((...args: any[]) => void);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (originalConsole as any)[consoleFunctionName] = consoleFunction.bind(console);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function newConsoleFunction(this: Console, ...args: any[]): void {\n\n            // [].slice.call(arguments) or Array.prototype.slice.call(arguments) or Array.from(arguments)\n\n            // const writeStream = (consoleFunctionName === \"error\" || consoleFunctionName === \"warn\")\n            //     ? stderr\n            //     : stdout;\n\n            // if (writeStream) {\n            //     writeStream.write(\"\\n################# DEBUG:\\n\" + args.join(\"\\n---\\n\") + \"\\n#################\\n\");\n            // }\n\n            processConsoleFunctionCall.apply(this, args);\n\n            if (printInOriginalConsole) {\n                const originalConsoleFunction =\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    ((originalConsole as any)[consoleFunctionName] as ((...args: any[]) => void));\n                // process.stderr.write(consoleFunctionName + \" -- \" + util.inspect(originalConsoleFunction,\n                //     { showHidden: false, depth: 1000, colors: true, customInspect: true }) + \"\\n\");\n                originalConsoleFunction.apply(this, args);\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (console as any)[consoleFunctionName] = newConsoleFunction.bind(console);\n    });\n\n    return () => {\n        _consoleFunctionNames.forEach((consoleFunctionName) => {\n            const originalConsoleFunction =\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ((originalConsole as any)[consoleFunctionName] as ((...args: any[]) => void));\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (console as any)[consoleFunctionName] = originalConsoleFunction.bind(console);\n        });\n    };\n}\n\n// debug(\"xxx\");\n// console.log(\"xxx\");\n// debug(\"xx%%x\");\n// console.log(\"xx%%x\");\n// debug(\"xxx%%\");\n// console.log(\"xxx%%\");\n// debug(\"%%xxx\");\n// console.log(\"%%xxx\");\n// debug(\"xxx\", 2, \"yy%%y\");\n// console.log(\"xxx\", 2, \"yy%%y\");\n// debug(\"%%xxx %d %s\", 2, \"y%%yy\");\n// console.log(\"%%xxx %d %s\", 2, \"y%%yy\");\n// debug(\"xxx %d %s%%\", 2, \"yyy\", 3, true);\n// console.log(\"xxx %d %s%%\", 2, \"yyy\", 3, true);\n// debug(\"xxx %d %s %% da%3Dniel%3D\", 2, \"yyy\", 3, false);\n// console.log(\"xxx %d %s %% da%3Dniel%3D\", 2, \"yyy\", 3, false);\n// debug(\"xxx %d %s %c daniel\", 2, \"yyy\", \"color: red\", 3, true);\n// console.log(\"xxx %d %s %c daniel\", 2, \"yyy\", \"color: red\", 3, true);\n"]}