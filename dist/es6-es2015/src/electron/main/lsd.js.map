{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\r\nimport { Server } from \"@r2-streamer-js/http/server\";\r\nimport { Publication } from \"@r2-streamer-js/models/publication\";\r\nimport * as debug_ from \"debug\";\r\nimport { ipcMain } from \"electron\";\r\nimport * as moment from \"moment\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\n\r\nimport {\r\n    R2_EVENT_LCP_LSD_RENEW,\r\n    R2_EVENT_LCP_LSD_RENEW_RES,\r\n    R2_EVENT_LCP_LSD_RETURN,\r\n    R2_EVENT_LCP_LSD_RETURN_RES,\r\n} from \"../common/events\";\r\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\r\nimport { lsdLcpUpdate, lsdLcpUpdateInject } from \"./lsd-injectlcpl\";\r\nimport { lsdRegister } from \"./lsd-register\";\r\nimport { lsdRenew } from \"./lsd-renew\";\r\nimport { lsdReturn } from \"./lsd-return\";\r\n\r\nconst debug = debug_(\"r2:electron:main:lsd\");\r\n\r\nexport function installLsdHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\r\n\r\n    ipcMain.on(R2_EVENT_LCP_LSD_RETURN, async (event: any, publicationFilePath: string) => {\r\n\r\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\r\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\r\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, \"Internal error!\");\r\n            return;\r\n        }\r\n\r\n        let renewResponseJson: any;\r\n        try {\r\n            renewResponseJson = await lsdReturn(publication.LCP.LSDJson, deviceIDManager);\r\n            publication.LCP.LSDJson = renewResponseJson;\r\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, true, \"Returned.\");\r\n            return;\r\n        } catch (err) {\r\n            debug(err);\r\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, err);\r\n        }\r\n    });\r\n\r\n    ipcMain.on(R2_EVENT_LCP_LSD_RENEW, async (event: any, publicationFilePath: string, endDateStr: string) => {\r\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\r\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\r\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, \"Internal error!\");\r\n            return;\r\n        }\r\n\r\n        const endDate = endDateStr.length ? moment(endDateStr).toDate() : undefined;\r\n        let renewResponseJson: any;\r\n        try {\r\n            renewResponseJson = await lsdRenew(endDate, publication.LCP.LSDJson, deviceIDManager);\r\n            publication.LCP.LSDJson = renewResponseJson;\r\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, true, \"Renewed.\");\r\n            return;\r\n        } catch (err) {\r\n            debug(err);\r\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, err);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function launchStatusDocumentProcessing(\r\n    publication: Publication,\r\n    publicationPath: string,\r\n    deviceIDManager: IDeviceIDManager,\r\n    onStatusDocumentProcessingComplete: () => void) {\r\n\r\n    if (!publication.LCP || !publication.LCP.Links) {\r\n        if (onStatusDocumentProcessingComplete) {\r\n            onStatusDocumentProcessingComplete();\r\n        }\r\n        return;\r\n    }\r\n    const linkStatus = publication.LCP.Links.find((link) => {\r\n        return link.Rel === \"status\";\r\n    });\r\n    if (!linkStatus) {\r\n        if (onStatusDocumentProcessingComplete) {\r\n            onStatusDocumentProcessingComplete();\r\n        }\r\n        return;\r\n    }\r\n\r\n    debug(linkStatus);\r\n\r\n    const failure = (err: any) => {\r\n        debug(err);\r\n        if (onStatusDocumentProcessingComplete) {\r\n            onStatusDocumentProcessingComplete();\r\n        }\r\n    };\r\n\r\n    const success = async (response: request.RequestResponse) => {\r\n\r\n        Object.keys(response.headers).forEach((header: string) => {\r\n            debug(header + \" => \" + response.headers[header]);\r\n        });\r\n\r\n        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n            failure(\"HTTP CODE \" + response.statusCode);\r\n            return;\r\n        }\r\n\r\n        let responseData: Buffer;\r\n        try {\r\n            responseData = await streamToBufferPromise(response);\r\n        } catch (err) {\r\n            debug(err);\r\n            if (onStatusDocumentProcessingComplete) {\r\n                onStatusDocumentProcessingComplete();\r\n            }\r\n            return;\r\n        }\r\n        if (!responseData) {\r\n            if (onStatusDocumentProcessingComplete) {\r\n                onStatusDocumentProcessingComplete();\r\n            }\r\n            return;\r\n        }\r\n        const responseStr = responseData.toString(\"utf8\");\r\n        if (response.headers[\"content-type\"] === \"application/vnd.readium.license.status.v1.0+json\" ||\r\n            response.headers[\"content-type\"] === \"application/json\") {\r\n            debug(responseStr);\r\n        }\r\n        const lsdJson = global.JSON.parse(responseStr);\r\n        debug(lsdJson);\r\n\r\n        publication.LCP.LSDJson = lsdJson;\r\n\r\n        // debug(lsdJson.id);\r\n        // debug(lsdJson.status); // revoked, returned, cancelled, expired\r\n        // debug(lsdJson.message);\r\n        // if (lsdJson.updated) {\r\n        //     debug(lsdJson.updated.license);\r\n        //     debug(lsdJson.updated.status);\r\n        // }\r\n        // if (lsdJson.links) {\r\n        //     lsdJson.links.forEach((link: any) => {\r\n        //         debug(link.rel); // license, register, return, renew\r\n        //         debug(link.href);\r\n        //         debug(link.type);\r\n        //         debug(link.templated);\r\n        //         debug(link.title);\r\n        //         debug(link.profile);\r\n        //     });\r\n        // }\r\n        // if (lsdJson.potential_rights) {\r\n        //     debug(lsdJson.potential_rights.end);\r\n        // }\r\n        // if (lsdJson.events) {\r\n        //     lsdJson.events.forEach((event: any) => {\r\n        //         debug(event.type);\r\n        //         debug(event.name);\r\n        //         debug(event.timestamp); // ISO 8601 time and date\r\n        //         debug(event.id);\r\n        //     });\r\n        // }\r\n\r\n        let licenseUpdateResponseJson: string | undefined;\r\n        try {\r\n            licenseUpdateResponseJson = await lsdLcpUpdate(lsdJson, publication);\r\n        } catch (err) {\r\n            debug(err);\r\n            // if (onStatusDocumentProcessingComplete) {\r\n            //     onStatusDocumentProcessingComplete();\r\n            // }\r\n            // return;\r\n        }\r\n        if (licenseUpdateResponseJson) {\r\n            let res: string;\r\n            try {\r\n                res = await lsdLcpUpdateInject(licenseUpdateResponseJson, publication, publicationPath);\r\n                debug(\"EPUB SAVED: \" + res);\r\n            } catch (err) {\r\n                debug(err);\r\n            }\r\n            if (onStatusDocumentProcessingComplete) {\r\n                onStatusDocumentProcessingComplete();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (lsdJson.status === \"revoked\"\r\n            || lsdJson.status === \"returned\"\r\n            || lsdJson.status === \"cancelled\"\r\n            || lsdJson.status === \"expired\") {\r\n\r\n            debug(\"What?! LSD \" + lsdJson.status);\r\n            // This should really never happen,\r\n            // as the LCP license should not even pass validation\r\n            // due to passed end date / expired timestamp\r\n            if (onStatusDocumentProcessingComplete) {\r\n                onStatusDocumentProcessingComplete();\r\n            }\r\n            return;\r\n        }\r\n\r\n        let registerResponseJson: any;\r\n        try {\r\n            registerResponseJson = await lsdRegister(lsdJson, deviceIDManager);\r\n            publication.LCP.LSDJson = registerResponseJson;\r\n        } catch (err) {\r\n            debug(err);\r\n        }\r\n        if (onStatusDocumentProcessingComplete) {\r\n            onStatusDocumentProcessingComplete();\r\n        }\r\n    };\r\n\r\n    const headers = {\r\n        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\r\n    };\r\n\r\n    // No response streaming! :(\r\n    // https://github.com/request/request-promise/issues/90\r\n    const needsStreamingResponse = true;\r\n    if (needsStreamingResponse) {\r\n        request.get({\r\n            headers,\r\n            method: \"GET\",\r\n            uri: linkStatus.Href,\r\n        })\r\n            .on(\"response\", success)\r\n            .on(\"error\", failure);\r\n    } else {\r\n        let response: requestPromise.FullResponse;\r\n        try {\r\n            // tslint:disable-next-line:await-promise no-floating-promises\r\n            response = await requestPromise({\r\n                headers,\r\n                method: \"GET\",\r\n                resolveWithFullResponse: true,\r\n                uri: linkStatus.Href,\r\n            });\r\n        } catch (err) {\r\n            failure(err);\r\n            return;\r\n        }\r\n\r\n        await success(response);\r\n    }\r\n}\r\n"]}