{"version":3,"file":"lsd-register.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-register.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\r\nimport * as debug_ from \"debug\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\n\r\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\r\n\r\nimport URITemplate = require(\"urijs/src/URITemplate\");\r\n\r\nconst debug = debug_(\"r2:electron:main:lsd\");\r\n\r\nexport async function lsdRegister(\r\n    lsdJson: any,\r\n    deviceIDManager: IDeviceIDManager): Promise<any> {\r\n\r\n    if (!lsdJson.links) {\r\n        return Promise.reject(\"No LSD links!\");\r\n    }\r\n\r\n    const licenseRegister = lsdJson.links.find((link: any) => {\r\n        return link.rel === \"register\";\r\n    });\r\n    if (!licenseRegister) {\r\n        return Promise.reject(\"No LSD register link!\");\r\n    }\r\n\r\n    const deviceID = deviceIDManager.getDeviceID();\r\n    const deviceNAME = deviceIDManager.getDeviceNAME();\r\n\r\n    let doRegister = false;\r\n    if (lsdJson.status === \"ready\") {\r\n        doRegister = true;\r\n    } else if (lsdJson.status === \"active\") {\r\n        const deviceIDForStatusDoc = deviceIDManager.checkDeviceID(lsdJson.id);\r\n        if (!deviceIDForStatusDoc) {\r\n            doRegister = true;\r\n        } else if (deviceIDForStatusDoc !== deviceID) {\r\n            debug(\"LSD registered device ID is different?\");\r\n            // this should really never happen ... but let's ensure anyway.\r\n            doRegister = true;\r\n        }\r\n    }\r\n\r\n    if (!doRegister) {\r\n        return Promise.reject(\"No need to LSD register.\");\r\n    }\r\n\r\n    let registerURL = licenseRegister.href;\r\n    if (licenseRegister.templated === true || licenseRegister.templated === \"true\") {\r\n        const urlTemplate = new URITemplate(registerURL);\r\n        registerURL = (urlTemplate as any).expand({ id: deviceID, name: deviceNAME }, { strict: true });\r\n\r\n        // url = url.replace(\"{?id,name}\", \"\"); // TODO: smarter regexp?\r\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\r\n    }\r\n    debug(\"REGISTER: \" + registerURL);\r\n\r\n    return new Promise<any>(async (resolve, reject) => {\r\n        const failure = (err: any) => {\r\n            reject(err);\r\n        };\r\n\r\n        const success = async (response: request.RequestResponse) => {\r\n\r\n            Object.keys(response.headers).forEach((header: string) => {\r\n                debug(header + \" => \" + response.headers[header]);\r\n            });\r\n\r\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n                failure(\"HTTP CODE \" + response.statusCode);\r\n                return;\r\n            }\r\n\r\n            let responseData: Buffer;\r\n            try {\r\n                responseData = await streamToBufferPromise(response);\r\n            } catch (err) {\r\n                reject(err);\r\n                return;\r\n            }\r\n            if (!responseData) {\r\n                return;\r\n            }\r\n            const responseStr = responseData.toString(\"utf8\");\r\n            debug(responseStr);\r\n            const responseJson = global.JSON.parse(responseStr);\r\n            debug(responseJson);\r\n\r\n            if (responseJson.status === \"active\") {\r\n                deviceIDManager.recordDeviceID(responseJson.id);\r\n            }\r\n\r\n            resolve(responseJson);\r\n        };\r\n\r\n        const headers = {\r\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\r\n        };\r\n\r\n        // No response streaming! :(\r\n        // https://github.com/request/request-promise/issues/90\r\n        const needsStreamingResponse = true;\r\n        if (needsStreamingResponse) {\r\n            request.post({\r\n                headers,\r\n                method: \"POST\",\r\n                uri: registerURL,\r\n            })\r\n                .on(\"response\", success)\r\n                .on(\"error\", failure);\r\n        } else {\r\n            let response: requestPromise.FullResponse;\r\n            try {\r\n                // tslint:disable-next-line:await-promise no-floating-promises\r\n                response = await requestPromise({\r\n                    headers,\r\n                    method: \"POST\",\r\n                    resolveWithFullResponse: true,\r\n                    uri: registerURL,\r\n                });\r\n            } catch (err) {\r\n                failure(err);\r\n                return;\r\n            }\r\n\r\n            await success(response);\r\n        }\r\n    });\r\n}\r\n"]}