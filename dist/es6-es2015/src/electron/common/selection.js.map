{"version":3,"file":"selection.js","sourceRoot":"","sources":["../../../../../src/electron/common/selection.ts"],"names":[],"mappings":"","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Selection\n// https://developer.mozilla.org/en-US/docs/Web/API/Range\n\n// A serializable mapping with DOM Range\n// (simply encodes a CSS Selector for element, and if text node, then encodes its parent element)\nexport interface IRangeInfo {\n    // always references an element,\n    // either Range.startContainer if its nodeType == Node.ELEMENT_NODE\n    // or Range.startContainer.parentElement if Range.startContainer.nodeType == Node.TEXT_NODE\n    startContainerElementCssSelector: string;\n\n    // if i == -1, Range.startContainer is the above element\n    // if i >=0 and i < element.childNodes.length, Range.startContainer is the above element.childNodes[i]\n    // and element.childNodes[i].nodeType == Node.TEXT_NODE\n    startContainerChildTextNodeIndex: number;\n\n    // if Range.startContainer.nodeType == Node.TEXT_NODE\n    // then if j >=0 and j < Range.startContainer.data.length, Range.startContainer.data[j] is the first char,\n    // or if j >= Range.startContainer.data.length, the Range starts after the text but before the text node ends\n    //\n    // if Range.startContainer.nodeType == Node.ELEMENT_NODE\n    // then if j >=0 and j < Range.startContainer.childNodes.length,\n    // Range.startContainer.childNodes[j] is the first node inclusive of the range,\n    // and if j >= Range.startContainer.childNodes.length, the Range starts after the last node,\n    /// but before the parent contents ends\n    startOffset: number;\n\n    endContainerElementCssSelector: string;\n    endContainerChildTextNodeIndex: number;\n    endOffset: number;\n\n    cfi: string | undefined;\n}\n\nexport interface ISelectionInfo {\n    rangeInfo: IRangeInfo;\n    cleanText: string;\n    rawText: string;\n}\n"]}