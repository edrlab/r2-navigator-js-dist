{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/common/sessions.ts"],"names":[],"mappings":";;AAAa,QAAA,kBAAkB,GAAG,4BAA4B,CAAC;AAElD,QAAA,+BAA+B,GAAG,SAAS,CAAC;AAE5C,QAAA,4BAA4B,GAAG,CAAC,GAAW,EAAU,EAAE;IAChE,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,qFAAqF,CAAC,CAAC;IACjH,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACvE,MAAM,IAAI,GAAG,uCAA+B,GAAG,KAAK;YAChD,IAAI,GAAG,KAAK;YACZ,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;YACjB,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;YACjB,OAAO,CAAC,CAAC,CAAC,CAAC;QAKf,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACf,CAAC,CAAC;AAEW,QAAA,4BAA4B,GAAG,CAAC,GAAW,EAAU,EAAE;IAChE,IAAI,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,uCAA+B,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;IAEpE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,gFAAgF,CAAC,CAAC;IAC7G,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YAE1E,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAE1C,MAAM,CAAC,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;YACzB,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC;YAC7B,OAAO,GAAG,KAAK;YACf,OAAO,CAAC,CAAC,CAAC,CAAC;QAKX,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACf,CAAC,CAAC","sourcesContent":["export const R2_SESSION_WEBVIEW = \"persist:readium2pubwebview\";\n\nexport const READIUM2_ELECTRON_HTTP_PROTOCOL = \"httpsr2\";\n\nexport const convertHttpUrlToCustomScheme = (url: string): string => {\n    const matches = url.match(/(http[s]?):\\/\\/([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)(?::([0-9]+))?\\/pub\\/([^\\/]+)(\\/.*)?/);\n    if (matches && matches.length > 1) {\n        const pubID = matches[4].replace(/([A-Z])/g, \"_$1\").replace(/=/g, \"-\");\n        const url_ = READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\" +\n            \"id\" + pubID +\n            \"/x\" + matches[1] +\n            \"/ip\" + matches[2] +\n            \"/p\" + matches[3] +\n            matches[5];\n        // console.log(\"convertHttpUrlToCustomScheme:\");\n        // console.log(url);\n        // console.log(\"===>\");\n        // console.log(url_);\n        return url_;\n    }\n    return url;\n};\n\nexport const convertCustomSchemeToHttpUrl = (url: string): string => {\n    let url_ = url.replace(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\", \"\");\n    // const matches = url_.match(/(http[s]?)\\.ip([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\\.p([0-9]+)?\\.id([^\\/]+)(\\/.*)?/);\n    const matches = url_.match(/id([^\\/]+)\\/x(http[s]?)\\/ip([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\\/p([0-9]+)?(\\/.*)?/);\n    if (matches && matches.length > 1) {\n        const pubID = matches[1].replace(/-/g, \"=\").replace(/(_[a-zA-Z])/g, (match) => {\n            // console.log(match);\n            const ret = match.substr(1).toUpperCase();\n            // console.log(ret);\n            return ret;\n        });\n        url_ = matches[2] + \"://\" +\n        matches[3] + \":\" + matches[4] +\n        \"/pub/\" + pubID +\n        matches[5];\n        // console.log(\"convertCustomSchemeToHttpUrl:\");\n        // console.log(url);\n        // console.log(\"===>\");\n        // console.log(url_);\n        return url_;\n    }\n    return url;\n};\n"]}