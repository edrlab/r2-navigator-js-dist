{"version":3,"file":"lsd-injectlcpl.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-injectlcpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\n\r\nimport { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\r\nimport { injectBufferInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\r\nimport { Publication } from \"@r2-streamer-js/models/publication\";\r\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\r\nimport * as debug_ from \"debug\";\r\nimport * as moment from \"moment\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nconst debug = debug_(\"r2:electron:main:lsd\");\r\n\r\nexport async function lsdLcpUpdateInject(\r\n    lcplStr: string,\r\n    publication: Publication,\r\n    publicationPath: string): Promise<string> {\r\n\r\n    const lcplJson = global.JSON.parse(lcplStr);\r\n    debug(lcplJson);\r\n\r\n    const zipEntryPath = \"META-INF/license.lcpl\";\r\n\r\n    let lcpl: LCP;\r\n    try {\r\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\r\n    } catch (erorz) {\r\n        return Promise.reject(erorz);\r\n    }\r\n    lcpl.ZipPath = zipEntryPath;\r\n    lcpl.JsonSource = lcplStr;\r\n    lcpl.init();\r\n    publication.LCP = lcpl;\r\n    // publication.AddLink(\"application/vnd.readium.lcp.license-1.0+json\", [\"license\"],\r\n    //     lcpl.ZipPath, false);\r\n\r\n    return new Promise<any>(async (resolve, reject) => {\r\n        const newPublicationPath = publicationPath + \".new\";\r\n        injectBufferInZip(publicationPath, newPublicationPath, Buffer.from(lcplStr, \"utf8\"), zipEntryPath,\r\n            (err) => {\r\n                reject(err);\r\n            },\r\n            () => {\r\n                debug(\"EPUB license.lcpl injected.\");\r\n\r\n                setTimeout(() => {\r\n                    fs.unlinkSync(publicationPath);\r\n                    setTimeout(() => {\r\n                        fs.renameSync(newPublicationPath, publicationPath);\r\n                        resolve(publicationPath);\r\n                    }, 500);\r\n                }, 500);\r\n            });\r\n    });\r\n}\r\n\r\nexport async function lsdLcpUpdate(\r\n    lsdJson: any,\r\n    publication: Publication): Promise<string> {\r\n\r\n    if (lsdJson.updated && lsdJson.updated.license &&\r\n        (publication.LCP.Updated || publication.LCP.Issued)) {\r\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\r\n        const updatedLicense = moment(publication.LCP.Updated || publication.LCP.Issued);\r\n        const forceUpdate = false; // just for testing!\r\n        if (forceUpdate ||\r\n            updatedLicense.isBefore(updatedLicenseLSD)) {\r\n            debug(\"LSD license updating...\");\r\n            if (lsdJson.links) {\r\n                const licenseLink = lsdJson.links.find((link: any) => {\r\n                    return link.rel === \"license\";\r\n                });\r\n                if (!licenseLink) {\r\n                    return Promise.reject(\"LSD license link is missing.\");\r\n                }\r\n\r\n                debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\r\n\r\n                return new Promise<any>(async (resolve, reject) => {\r\n\r\n                    const failure = (err: any) => {\r\n                        reject(err);\r\n                    };\r\n\r\n                    const success = async (response: request.RequestResponse) => {\r\n\r\n                        Object.keys(response.headers).forEach((header: string) => {\r\n                            debug(header + \" => \" + response.headers[header]);\r\n                        });\r\n\r\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n                            if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\r\n                                licenseLink.href = licenseLink.href.replace(\"/licenses/\", \"/api/v1/purchases/license/\");\r\n                                debug(\"TRYING AGAIN: \" + licenseLink.href);\r\n                                let newRes: any;\r\n                                try {\r\n                                    newRes = await lsdLcpUpdate(lsdJson, publication); // recursive\r\n                                } catch (err) {\r\n                                    failure(err);\r\n                                    return;\r\n                                }\r\n                                resolve(newRes);\r\n                            } else {\r\n                                failure(\"HTTP CODE \" + response.statusCode);\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        let responseData: Buffer;\r\n                        try {\r\n                            responseData = await streamToBufferPromise(response);\r\n                        } catch (err) {\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        if (!responseData) {\r\n                            return;\r\n                        }\r\n                        const lcplStr = responseData.toString(\"utf8\");\r\n                        debug(lcplStr);\r\n                        resolve(lcplStr);\r\n                    };\r\n\r\n                    const headers = {\r\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\r\n                    };\r\n\r\n                    // No response streaming! :(\r\n                    // https://github.com/request/request-promise/issues/90\r\n                    const needsStreamingResponse = true;\r\n                    if (needsStreamingResponse) {\r\n                        request.get({\r\n                            headers,\r\n                            method: \"GET\",\r\n                            uri: licenseLink.href,\r\n                        })\r\n                            .on(\"response\", success)\r\n                            .on(\"error\", failure);\r\n                    } else {\r\n                        let response: requestPromise.FullResponse;\r\n                        try {\r\n                            // tslint:disable-next-line:await-promise no-floating-promises\r\n                            response = await requestPromise({\r\n                                headers,\r\n                                method: \"GET\",\r\n                                resolveWithFullResponse: true,\r\n                                uri: licenseLink.href,\r\n                            });\r\n                        } catch (err) {\r\n                            failure(err);\r\n                            return;\r\n                        }\r\n\r\n                        await success(response);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return Promise.reject(\"No LSD LCP update.\");\r\n}\r\n"]}