{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAGjC,gCAAgC;AAChC,uCAAmC;AAEnC,6CAAoF;AAIpF,MAAM,KAAK,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAE7C,2BAAkC,kBAA0B;IAExD,kBAAO,CAAC,EAAE,CAAC,8BAAqB,EAAE,KAAK,EACnC,KAAU,EACV,mBAA2B,EAC3B,OAAe,EACf,WAAoB,EAAE,EAAE;QAMxB,IAAI,CAAC;YAED,MAAM,UAAU,CAAC,mBAAmB,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;YAE5D,IAAI,aAAiC,CAAC;YACtC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACd,aAAa,GAAG,OAAO,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACzB,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAG3C,CAAC;YAED,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EACvC,IAAI,EACJ,UAAU,EACV,aAAa,CAChB,CAAC;QACN,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,GAAG,CAAC,CAAC;YACX,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EACvC,KAAK,EACL,GAAG,EACH,KAAK,CACR,CAAC;QA4BN,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,qBAAqB,mBAA2B,EAAE,OAAe,EAAE,WAAoB;QACxF,MAAM,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;QACvD,CAAC;QAED,IAAI,UAA8B,CAAC;QAEnC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,UAAU,GAAG,OAAO,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACzB,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAGxC,CAAC;QAGD,IAAI,CAAC;YAED,MAAM,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACpD,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,GAAG,CAAC,CAAC;YACX,KAAK,CAAC,sCAAsC,GAAG,GAAG,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;AACL,CAAC;AAlGD,8CAkGC","sourcesContent":["import * as crypto from \"crypto\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\n\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\n\n// import { ITryLcpUserKeyResult } from \"@r2-lcp-js/parser/epub/lcp\";\n\nconst debug = debug_(\"r2:electron:main:lcp\");\n\nexport function installLcpHandler(publicationsServer: Server) {\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n\n        // let okay = false;\n        try {\n            // okay =\n            await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n\n            let passSha256Hex: string | undefined;\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n\n            event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n                true,\n                \"Correct.\",\n                passSha256Hex,\n            );\n        } catch (err) {\n            debug(err);\n            event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n                false,\n                err,\n                \"xxx\",\n            );\n            // DRMErrorCode (from r2-lcp-client)\n            //     // No error\n            //     NONE = 0,\n            //     /**\n            //         WARNING ERRORS > 10\n            //     **/\n            //     // License is out of date (check start and end date)\n            //     LICENSE_OUT_OF_DATE = 11,\n            //     /**\n            //         CRITICAL ERRORS > 100\n            //     **/\n            //     // Certificate has been revoked in the CRL\n            //     CERTIFICATE_REVOKED = 101,\n            //     // Certificate has not been signed by CA\n            //     CERTIFICATE_SIGNATURE_INVALID = 102,\n            //     // License has been issued by an expired certificate\n            //     LICENSE_SIGNATURE_DATE_INVALID = 111,\n            //     // License signature does not match\n            //     LICENSE_SIGNATURE_INVALID = 112,\n            //     // The drm context is invalid\n            //     CONTEXT_INVALID = 121,\n            //     // Unable to decrypt encrypted content key from user key\n            //     CONTENT_KEY_DECRYPT_ERROR = 131,\n            //     // User key check invalid\n            //     USER_KEY_CHECK_INVALID = 141,\n            //     // Unable to decrypt encrypted content from content key\n            //     CONTENT_DECRYPT_ERROR = 151\n        }\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP) {\n            return Promise.reject(\"no publication LCP data?!\");\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        // let okay: ITryLcpUserKeyResult;\n        try {\n            // okay =\n            await publication.LCP.tryUserKeys([lcpPassHex]);\n        } catch (err) {\n            debug(err);\n            debug(\"FAIL publication.LCP.tryUserKeys(): \" + err);\n            return Promise.reject(err);\n        }\n        return Promise.resolve(true);\n    }\n}\n"]}