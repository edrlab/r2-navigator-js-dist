{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/main/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport {\n    CertificateVerifyProcProcRequest, RedirectRequest, Request, app, protocol, session,\n} from \"electron\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nimport {\n    R2_SESSION_WEBVIEW, READIUM2_ELECTRON_HTTP_PROTOCOL, convertCustomSchemeToHttpUrl,\n} from \"../common/sessions\";\n\nconst debug = debug_(\"r2:navigator#electron/main/sessions\");\n\ninterface PromiseFulfilled<T> {\n    status: \"fulfilled\";\n    value: T;\n}\ninterface PromiseRejected {\n    status: \"rejected\";\n    reason: any;\n}\n\nasync function promiseAllSettled<T>(promises: Array<Promise<T>>):\n    Promise<Array<(PromiseFulfilled<T> | PromiseRejected)>> {\n\n    const promises_ = promises.map(async (promise) => {\n        return promise\n            .then<PromiseFulfilled<T>>((value) => {\n                return {\n                    status: \"fulfilled\",\n                    value,\n                };\n            })\n            .catch((reason) => {\n                return {\n                    reason,\n                    status: \"rejected\",\n                } as PromiseRejected;\n            });\n    });\n    return Promise.all(promises_);\n}\n\nexport function secureSessions(server: Server) {\n\n    const filter = { urls: [\"*://*/*\"] };\n\n    // https://github.com/electron/electron/blob/master/docs/tutorial/security.md#csp-http-header\n    const onHeadersReceivedCB = (details: any, callback: any) => {\n        // debug(\"onHeadersReceived\");\n        // debug(details);\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if ((serverUrl && details.url.startsWith(serverUrl)) ||\n            details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n\n            callback({\n                responseHeaders: {\n                    ...details.responseHeaders,\n                    \"Content-Security-Policy\":\n                        // tslint:disable-next-line:max-line-length\n                        [`default-src 'self' 'unsafe-inline' 'unsafe-eval' data: http: https: ${READIUM2_ELECTRON_HTTP_PROTOCOL}: ${serverUrl}`],\n                },\n            });\n        } else {\n            callback({});\n        }\n    };\n\n    const onBeforeSendHeadersCB = (details: any, callback: any) => {\n        // debug(\"onBeforeSendHeaders\");\n        // debug(details);\n\n        // details.requestHeaders[\"User-Agent\"] = \"R2 Electron\";\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if (server.isSecured() &&\n            ((serverUrl && details.url.startsWith(serverUrl)) ||\n                details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\"))) {\n\n            const header = server.getSecureHTTPHeader(details.url);\n            if (header) {\n                details.requestHeaders[header.name] = header.value;\n            }\n            callback({ cancel: false, requestHeaders: details.requestHeaders });\n        } else {\n            callback({ cancel: false });\n        }\n    };\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#session\n    const setCertificateVerifyProcCB = (\n        request: CertificateVerifyProcProcRequest,\n        callback: (verificationResult: number) => void) => {\n        // debug(\"setCertificateVerifyProc\");\n        // debug(request);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (request.hostname === info.urlHost) {\n                    callback(0); // OK\n                    return;\n                }\n            }\n        }\n        callback(-3); // Chromium\n        // callback(-2); // Fail\n    };\n\n    if (session.defaultSession) {\n        session.defaultSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        session.defaultSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        session.defaultSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    const webViewSession = getWebViewSession();\n    if (webViewSession) {\n        webViewSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        webViewSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        webViewSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    app.on(\"certificate-error\", (event, _webContents, url, _error, _certificate, callback) => {\n        // debug(\"certificate-error\");\n        // debug(url);\n        // debug(error);\n        // debug(certificate);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n                    // debug(\"certificate-error: BYPASS\");\n\n                    event.preventDefault();\n                    callback(true);\n                    return;\n                }\n            }\n        }\n\n        callback(false);\n    });\n\n    // app.on(\"select-client-certificate\", (event, _webContents, url, list, callback) => {\n    //     debug(\"select-client-certificate\");\n    //     debug(url);\n    //     debug(list);\n\n    //     if (server.isSecured()) {\n    //         const info = server.serverInfo();\n    //         if (info) {\n    //             debug(info);\n    //             if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n    //                 debug(\"select-client-certificate: BYPASS\");\n\n    //                 event.preventDefault();\n    //                 callback({ data: info.clientcert } as Certificate);\n    //                 return;\n    //             }\n    //         }\n    //     }\n\n    //     callback();\n    // });\n}\n\nconst httpProtocolHandler = (\n    request: Request,\n    callback: (redirectRequest: RedirectRequest) => void) => {\n\n    // debug(\"httpProtocolHandler:\");\n    // debug(request.url);\n    // debug(request.referrer);\n    // debug(request.method);\n\n    const url = convertCustomSchemeToHttpUrl(request.url);\n\n    callback({\n        method: request.method,\n        // referrer: request.referrer,\n        // session: getWebViewSession() session.defaultSession\n        url,\n    });\n};\n\nexport function initSessions() {\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webframe\n    if ((protocol as any).registerStandardSchemes) {\n        (protocol as any).registerStandardSchemes([READIUM2_ELECTRON_HTTP_PROTOCOL], { secure: true });\n    } else {\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/electron/electron/blob/v5.0.0/docs/api/breaking-changes.md#privileged-schemes-registration\n        protocol.registerSchemesAsPrivileged([{\n            privileges: {\n                allowServiceWorkers: false,\n                bypassCSP: false,\n                corsEnabled: true,\n                secure: true,\n                standard: true,\n                supportFetchAPI: true,\n            },\n            scheme: READIUM2_ELECTRON_HTTP_PROTOCOL,\n        }]);\n    }\n\n    app.on(\"ready\", async () => {\n        debug(\"app ready\");\n\n        try {\n            await clearSessions();\n        } catch (err) {\n            debug(err);\n        }\n\n        // registered below (session.defaultSession.protocol === protocol)\n        // protocol.registerHttpProtocol(\n        //     READIUM2_ELECTRON_HTTP_PROTOCOL,\n        //     httpProtocolHandler,\n        //     (error: Error) => {\n        //         if (error) {\n        //             debug(error);\n        //         } else {\n        //             debug(\"registerHttpProtocol OKAY (protocol session)\");\n        //         }\n        //     });\n        if (session.defaultSession) {\n            session.defaultSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (default session)\");\n                    }\n                });\n        }\n        const webViewSession = getWebViewSession();\n        if (webViewSession) {\n            webViewSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (webview session)\");\n                    }\n                });\n\n            webViewSession.setPermissionRequestHandler((wc, permission, callback) => {\n                debug(\"setPermissionRequestHandler\");\n                debug(wc.getURL());\n                debug(permission);\n                callback(true);\n            });\n        }\n    });\n\n    async function willQuitCallback(evt: Electron.Event) {\n        debug(\"app will quit\");\n        evt.preventDefault();\n\n        app.removeListener(\"will-quit\", willQuitCallback);\n\n        try {\n            await clearSessions();\n        } catch (err) {\n            debug(err);\n        }\n        debug(\"Cache and StorageData cleared, now quitting...\");\n        app.quit();\n    }\n\n    app.on(\"will-quit\", willQuitCallback);\n}\n\nexport async function clearSession(sess: Electron.Session, str: string): Promise<void> {\n\n    const prom1 = sess.clearCache();\n\n    const prom2 = sess.clearStorageData({\n        origin: \"*\",\n        quotas: [\n            \"temporary\",\n            \"persistent\",\n            \"syncable\",\n        ],\n        storages: [\n            \"appcache\",\n            // \"cookies\",\n            // \"filesystem\",\n            // \"indexdb\",\n            // \"localstorage\", BLOCKS!?\n            // \"shadercache\",\n            // \"websql\",\n            \"serviceworkers\",\n        ],\n    });\n\n    try {\n        const results = await promiseAllSettled<void>([prom1, prom2]);\n        for (const result of results) {\n            debug(`SESSION CACHE + STORAGE DATA CLEARED - ${str} => ${result.status}`);\n        }\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n\nexport function getWebViewSession() {\n    return session.fromPartition(R2_SESSION_WEBVIEW, { cache: true });\n}\n\nexport async function clearWebviewSession(): Promise<void> {\n    const sess = getWebViewSession();\n    if (sess) {\n        try {\n            await clearSession(sess, \"[\" + R2_SESSION_WEBVIEW + \"]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearDefaultSession(): Promise<void> {\n    if (session.defaultSession) {\n        try {\n            await clearSession(session.defaultSession, \"[default]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearSessions(): Promise<void> {\n    try {\n        await promiseAllSettled([clearDefaultSession(), clearWebviewSession()]);\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n"]}