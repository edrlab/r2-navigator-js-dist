{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/main/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport {\n    BeforeSendResponse, CertificateVerifyProcProcRequest, HeadersReceivedResponse,\n    OnBeforeSendHeadersListenerDetails, OnHeadersReceivedListenerDetails, RedirectRequest, Request,\n    StreamProtocolResponse, app, protocol, session,\n} from \"electron\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\nimport { Transformers } from \"@r2-shared-js/transform/transformer\";\nimport { TTransformFunction, TransformerHTML } from \"@r2-shared-js/transform/transformer-html\";\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nimport { parseDOM, serializeDOM } from \"../common/dom\";\nimport {\n    R2_SESSION_WEBVIEW, READIUM2_ELECTRON_HTTP_PROTOCOL, convertCustomSchemeToHttpUrl,\n    convertHttpUrlToCustomScheme,\n} from \"../common/sessions\";\nimport {\n    URL_PARAM_CLIPBOARD_INTERCEPT, URL_PARAM_CSS, URL_PARAM_DEBUG_VISUALS,\n    URL_PARAM_EPUBREADINGSYSTEM, URL_PARAM_IS_IFRAME, URL_PARAM_SECOND_WEBVIEW,\n    URL_PARAM_SESSION_INFO, URL_PARAM_WEBVIEW_SLOT,\n} from \"../renderer/common/url-params\";\n\n// import { PassThrough } from \"stream\";\n// import { CounterPassThroughStream } from \"@r2-utils-js/_utils/stream/CounterPassThroughStream\";\n\nconst debug = debug_(\"r2:navigator#electron/main/sessions\");\n\nconst USE_STREAM_PROTOCOL_INSTEAD_OF_HTTP = true;\n\ninterface PromiseFulfilled<T> {\n    status: \"fulfilled\";\n    value: T;\n}\ninterface PromiseRejected {\n    status: \"rejected\";\n    reason: any;\n}\n\nasync function promiseAllSettled<T>(promises: Array<Promise<T>>):\n    Promise<Array<(PromiseFulfilled<T> | PromiseRejected)>> {\n\n    const promises_ = promises.map(async (promise) => {\n        return promise\n            .then<PromiseFulfilled<T>>((value) => {\n                return {\n                    status: \"fulfilled\",\n                    value,\n                };\n            })\n            .catch((reason) => {\n                return {\n                    reason,\n                    status: \"rejected\",\n                } as PromiseRejected;\n            });\n    });\n    return Promise.all(promises_);\n}\n\nlet _server: Server | undefined; // hacky (global reference context used in streamProtocolHandler callback)\nexport function secureSessions(server: Server) {\n    _server = server;\n\n    const filter = { urls: [\"*://*/*\"] };\n\n    const onHeadersReceivedCB = (\n        details: OnHeadersReceivedListenerDetails,\n        callback: (headersReceivedResponse: HeadersReceivedResponse) => void) => {\n\n        // debug(\"onHeadersReceived\");\n        // debug(details);\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if ((serverUrl && details.url.startsWith(serverUrl)) ||\n            details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n\n            callback({\n                cancel: false,\n                responseHeaders: {\n                    ...details.responseHeaders,\n                    // https://github.com/electron/electron/blob/master/docs/tutorial/security.md#csp-http-header\n                    \"Content-Security-Policy\":\n                        // tslint:disable-next-line:max-line-length\n                        [`default-src 'self' 'unsafe-inline' 'unsafe-eval' data: http: https: ${READIUM2_ELECTRON_HTTP_PROTOCOL}: ${serverUrl}`],\n                },\n                // statusLine\n            });\n        } else {\n            // HTTP headers passthrough\n            // https://github.com/electron/electron/issues/23988\n            callback({\n                cancel: false,\n                responseHeaders: {\n                    ...details.responseHeaders,\n                },\n                // statusLine\n            });\n        }\n    };\n\n    const onBeforeSendHeadersCB = (\n        details: OnBeforeSendHeadersListenerDetails,\n        callback: (beforeSendResponse: BeforeSendResponse) => void) => {\n\n        // debug(\"onBeforeSendHeaders\");\n        // debug(details);\n\n        // details.requestHeaders[\"User-Agent\"] = \"R2 Electron\";\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if (server.isSecured() &&\n            ((serverUrl && details.url.startsWith(serverUrl)) ||\n                details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\"))) {\n\n            const header = server.getSecureHTTPHeader(details.url);\n            if (header) {\n                details.requestHeaders[header.name] = header.value;\n            }\n            callback({\n                cancel: false,\n                requestHeaders: {\n                    ...details.requestHeaders,\n                },\n            });\n        } else {\n            // HTTP headers passthrough\n            // https://github.com/electron/electron/issues/23988\n            callback({\n                cancel: false,\n                requestHeaders: {\n                    ...details.requestHeaders,\n                },\n            });\n        }\n    };\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#session\n    const setCertificateVerifyProcCB = (\n        req: CertificateVerifyProcProcRequest,\n        callback: (verificationResult: number) => void) => {\n        // debug(\"setCertificateVerifyProc\");\n        // debug(req);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (req.hostname === info.urlHost) {\n                    callback(0); // OK\n                    return;\n                }\n            }\n        }\n        callback(-3); // Chromium\n        // callback(-2); // Fail\n    };\n\n    if (session.defaultSession) {\n        session.defaultSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        session.defaultSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        session.defaultSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    const webViewSession = getWebViewSession();\n    if (webViewSession) {\n        webViewSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        webViewSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        webViewSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    app.on(\"certificate-error\", (event, _webContents, url, _error, _certificate, callback) => {\n        // debug(\"certificate-error\");\n        // debug(url);\n        // debug(_error);\n        // debug(_certificate);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n                    // debug(\"certificate-error: BYPASS\");\n\n                    event.preventDefault();\n                    callback(true);\n                    return;\n                }\n            }\n        }\n\n        callback(false);\n    });\n\n    // app.on(\"select-client-certificate\", (event, _webContents, url, list, callback) => {\n    //     debug(\"select-client-certificate\");\n    //     debug(url);\n    //     debug(list);\n\n    //     if (server.isSecured()) {\n    //         const info = server.serverInfo();\n    //         if (info) {\n    //             debug(info);\n    //             if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n    //                 debug(\"select-client-certificate: BYPASS\");\n\n    //                 event.preventDefault();\n    //                 callback({ data: info.clientcert } as Certificate);\n    //                 return;\n    //             }\n    //         }\n    //     }\n\n    //     callback();\n    // });\n}\n\n// let _streamCounter = 0;\n\n// super hacky!! :(\n// see usages of this boolean...\nlet _customUrlProtocolSchemeHandlerWasCalled = false;\n\nconst streamProtocolHandler = async (\n    req: Request,\n    callback: (stream?: (NodeJS.ReadableStream) | (StreamProtocolResponse)) => void) => {\n\n    _customUrlProtocolSchemeHandlerWasCalled = true;\n\n    // debug(\"streamProtocolHandler:\");\n    // debug(req.url);\n    // debug(req.referrer);\n    // debug(req.method);\n    // debug(req.headers);\n\n    const url = convertCustomSchemeToHttpUrl(req.url);\n    // debug(url);\n\n    const u = new URL(url);\n    let ref = u.origin;\n    // debug(ref);\n    if (req.referrer && req.referrer.trim()) {\n        ref = req.referrer;\n        // debug(ref);\n    }\n\n    const failure = (err: any) => {\n        debug(err);\n        callback();\n    };\n\n    const success = (response: request.RequestResponse) => {\n\n        const headers: Record<string, (string) | (string[])> = {};\n        Object.keys(response.headers).forEach((header: string) => {\n            const val = response.headers[header];\n\n            // debug(header + \" => \" + val);\n\n            if (val) {\n                headers[header] = val;\n            }\n        });\n        if (!headers.referer) {\n            headers.referer = ref;\n        }\n\n        // debug(response);\n        // debug(response.body);\n\n        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n            failure(\"HTTP CODE \" + response.statusCode);\n            return;\n        }\n\n        // let length = 0;\n        // const lengthStr = response.headers[\"content-length\"];\n        // if (lengthStr) {\n        //     length = parseInt(lengthStr, 10);\n        // }\n        // const counterStream = new CounterPassThroughStream(++_streamCounter);\n\n        // // https://nodejs.org/es/docs/guides/backpressuring-in-streams/\n        // const stream = new PassThrough({\n        //     // allowHalfOpen // default true\n        //     // readableHighWaterMark: 16384 * 2, // default 16384 bytes\n        //     // writableHighWaterMark: 16384 * 2, // default 16384 bytes\n        //     // autoDestroy // default false\n        //     // emitClose // default true\n        // });\n        response\n        // .on(\"finish\", function h(this: request.Response) {\n        //     debug(\"RESPONSE FINISH \" + url);\n        // })\n        // .on(\"end\", function h(this: request.Response) {\n        //     debug(\"RESPONSE END \" + url);\n        // })\n        // .on(\"close\", function h(this: request.Response) {\n        //     debug(\"RESPONSE CLOSE \" + url);\n        // })\n        .on(\"error\", function h(this: request.Response) {\n            debug(\"RESPONSE ERROR \" + url);\n        })\n        // .on(\"pipe\", function h(this: request.Response) {\n        //     debug(\"RESPONSE PIPE \" + url);\n        // })\n        // .on(\"unpipe\", function h(this: request.Response) {\n        //     debug(\"RESPONSE UNPIPE \" + url);\n        // })\n        // .on(\"drain\", function h(this: request.Response) {\n        //     debug(\"RESPONSE DRAIN \" + url);\n        // })\n        // .on(\"pause\", function h(this: request.Response) {\n        //     debug(\"RESPONSE PAUSE \" + url);\n        // })\n        // .on(\"resume\", function h(this: request.Response) {\n        //     debug(\"RESPONSE RESUME \" + url);\n        // })\n        // .pipe(counterStream) // readable (response) --> writable (counterStream is duplex)\n        // .on(\"progress\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream PROGRESS: \" +\n        //         this.id + \" -- \" + this.bytesReceived + \" = \" + url);\n        // })\n        // .on(\"finish\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream FINISH: \" +\n        //         this.id +\n        //         \" -- \" + this.bytesReceived + \" = \" + url);\n        // })\n        // .on(\"end\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream END: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"close\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream CLOSE: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"error\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream ERROR: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"pipe\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream PIPE: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"unpipe\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream UNPIPE: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"drain\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream DRAIN: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"pause\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream PAUSE: \" +\n        //         this.id + \" = \" + url);\n        // })\n        // .on(\"resume\", function f(this: CounterPassThroughStream) {\n        //     debug(\"CounterPassThroughStream RESUME: \" +\n        //         this.id + \" = \" + url);\n        // })\n        ;\n        // .pipe(stream)\n        // .on(\"finish\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM FINISH \" + url);\n        // })\n        // .on(\"end\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM END \" + url);\n        // })\n        // .on(\"close\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM CLOSE \" + url);\n        // })\n        // .on(\"error\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM ERROR \" + url);\n        // })\n        // .on(\"pipe\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM PIPE \" + url);\n        // })\n        // .on(\"unpipe\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM UNPIPE \" + url);\n        // })\n        // .on(\"drain\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM DRAIN \" + url);\n        // })\n        // .on(\"pause\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM PAUSE \" + url);\n        // })\n        // .on(\"resume\", function h(this: PassThrough) {\n        //     debug(\"RESPONSE>STREAM RESUME \" + url);\n        // })\n        // ;\n\n        const obj = {\n            data: response, // NodeJS.ReadableStream\n            headers,\n            statusCode: response.statusCode,\n        };\n        callback(obj);\n\n        // let responseStr: string;\n        // if (response.body) {\n        //     debug(\"RES BODY\");\n        //     responseStr = response.body;\n        // } else {\n        //     debug(\"RES STREAM\");\n        //     let responseData: Buffer;\n        //     try {\n        //         responseData = await streamToBufferPromise(response);\n        //     } catch (err) {\n        //         debug(err);\n        //         return;\n        //     }\n        //     responseStr = responseData.toString(\"utf8\");\n        // }\n    };\n\n    const reqHeaders = req.headers;\n    if (_server) {\n        const serverUrl = _server.serverUrl();\n\n        if (_server.isSecured() &&\n            ((serverUrl && url.startsWith(serverUrl)) ||\n            url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\"))) {\n\n            const header = _server.getSecureHTTPHeader(url);\n            if (header) {\n                reqHeaders[header.name] = header.value;\n            }\n        }\n    }\n\n    // No response streaming! :(\n    // https://github.com/request/request-promise/issues/90\n    const needsStreamingResponse = true;\n\n    if (needsStreamingResponse) {\n        request.get({\n            headers: reqHeaders,\n            method: \"GET\",\n            rejectUnauthorized: false, // self-signed certificate\n            uri: url,\n        })\n        .on(\"response\", (response: request.RequestResponse) => {\n            success(response);\n        })\n        .on(\"error\", (err: any) => {\n            failure(err);\n        });\n    } else {\n        let response: requestPromise.FullResponse;\n        try {\n            // tslint:disable-next-line:await-promise no-floating-promises\n            response = await requestPromise({\n                headers: reqHeaders,\n                method: \"GET\",\n                rejectUnauthorized: false, // self-signed certificate\n                resolveWithFullResponse: true,\n                uri: url,\n            });\n            success(response);\n        } catch (err) {\n            failure(err);\n        }\n    }\n};\nconst httpProtocolHandler = (\n    req: Request,\n    callback: (redirectRequest: RedirectRequest) => void) => {\n\n    _customUrlProtocolSchemeHandlerWasCalled = true;\n\n    // debug(\"httpProtocolHandler:\");\n    // debug(req.url);\n    // debug(req.referrer);\n    // debug(req.method);\n    // debug(req.headers);\n\n    const url = convertCustomSchemeToHttpUrl(req.url);\n    // debug(url);\n\n    callback({\n        method: req.method,\n        session: getWebViewSession(), // session.defaultSession\n        url,\n    });\n};\n\n// const _htmlNamespaces: { [prefix: string]: string } = {\n//     epub: \"http://www.idpf.org/2007/ops\",\n// };\nconst transformerAudioVideo: TTransformFunction = (\n    _publication: Publication,\n    link: Link,\n    url: string | undefined,\n    htmlStr: string,\n    _sessionInfo: string | undefined,\n): string => {\n    // super hacky! (guarantees that convertCustomSchemeToHttpUrl() is necessary,\n    // unlike this `url` function parameter which is always HTTP as it originates\n    // from the streamer/server)\n    if (!_customUrlProtocolSchemeHandlerWasCalled) {\n        return htmlStr;\n    }\n\n    if (!url) {\n        return htmlStr;\n    }\n\n    if (htmlStr.indexOf(\"<audio\") < 0 && htmlStr.indexOf(\"<video\") < 0) {\n        return htmlStr;\n    }\n\n    // let's remove the DOCTYPE (which can contain entities)\n\n    const iHtmlStart = htmlStr.indexOf(\"<html\");\n    if (iHtmlStart < 0) {\n        return htmlStr;\n    }\n    const iBodyStart = htmlStr.indexOf(\"<body\");\n    if (iBodyStart < 0) {\n        return htmlStr;\n    }\n    const parseableChunk = htmlStr.substr(iHtmlStart);\n    const htmlStrToParse = `<?xml version=\"1.0\" encoding=\"utf-8\"?>${parseableChunk}`;\n\n    // import * as mime from \"mime-types\";\n    let mediaType = \"application/xhtml+xml\"; // mime.lookup(link.Href);\n    if (link && link.TypeLink) {\n        mediaType = link.TypeLink;\n    }\n\n    // debug(htmlStrToParse);\n    const documant = parseDOM(htmlStrToParse, mediaType);\n\n    // debug(url);\n    let urlHttp = url;\n    if (urlHttp.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n        urlHttp = convertCustomSchemeToHttpUrl(urlHttp);\n    }\n    const url_ = new URL(urlHttp);\n    url_.search = \"\";\n    url_.hash = \"\";\n    const urlStr = url_.toString();\n    // debug(urlStr);\n\n    const patchElementSrc = (el: Element) => {\n        const src = el.getAttribute(\"src\");\n        if (!src || src[0] === \"/\" ||\n            /^http[s]?:\\/\\//.test(src) || /^data:\\/\\//.test(src)) {\n            return;\n        }\n        let src_ = src;\n        if (src_.startsWith(\"./\")) {\n            src_ = src_.substr(2);\n        }\n        src_ = `${urlStr}/../${src_}`;\n        debug(`VIDEO/AUDIO SRC PATCH: ${src} ==> ${src_}`);\n        el.setAttribute(\"src\", src_);\n    };\n    const processTree = (el: Element) => {\n        let elName = el.nodeName.toLowerCase();\n        if (elName === \"audio\" || elName === \"video\") {\n            patchElementSrc(el);\n\n            if (!el.childNodes) {\n                return;\n            }\n            // tslint:disable-next-line: prefer-for-of\n            for (let i = 0; i < el.childNodes.length; i++) {\n                const childNode = el.childNodes[i];\n                if (childNode.nodeType === 1) { // Node.ELEMENT_NODE\n                    elName = (childNode as Element).nodeName.toLowerCase();\n                    if (elName === \"source\") {\n                        patchElementSrc(childNode as Element);\n                    }\n                }\n            }\n        } else {\n            if (!el.childNodes) {\n                return;\n            }\n            // tslint:disable-next-line: prefer-for-of\n            for (let i = 0; i < el.childNodes.length; i++) {\n                const childNode = el.childNodes[i];\n                if (childNode.nodeType === 1) { // Node.ELEMENT_NODE\n                    processTree(childNode as Element);\n                }\n            }\n        }\n    };\n    processTree(documant.body);\n\n    const serialized = serializeDOM(documant);\n\n    const prefix = htmlStr.substr(0, iHtmlStart);\n\n    const iHtmlStart_ = serialized.indexOf(\"<html\");\n    if (iHtmlStart_ < 0) {\n        return htmlStr;\n    }\n\n    const remaining = serialized.substr(iHtmlStart_);\n    const newStr = `${prefix}${remaining}`;\n    // debug(newStr);\n    return newStr;\n};\n\nconst transformerHttpBaseIframes: TTransformFunction = (\n    _publication: Publication,\n    link: Link,\n    url: string | undefined,\n    htmlStr: string,\n    _sessionInfo: string | undefined,\n): string => {\n    // super hacky! (guarantees that convertCustomSchemeToHttpUrl() is necessary,\n    // unlike this `url` function parameter which is always HTTP as it originates\n    // from the streamer/server)\n    if (!_customUrlProtocolSchemeHandlerWasCalled) {\n        return htmlStr;\n    }\n\n    if (!url) {\n        return htmlStr;\n    }\n\n    if (htmlStr.indexOf(\"<iframe\") < 0) {\n        return htmlStr;\n    }\n\n    // let's remove the DOCTYPE (which can contain entities)\n\n    const iHtmlStart = htmlStr.indexOf(\"<html\");\n    if (iHtmlStart < 0) {\n        return htmlStr;\n    }\n    const iBodyStart = htmlStr.indexOf(\"<body\");\n    if (iBodyStart < 0) {\n        return htmlStr;\n    }\n    const parseableChunk = htmlStr.substr(iHtmlStart);\n    const htmlStrToParse = `<?xml version=\"1.0\" encoding=\"utf-8\"?>${parseableChunk}`;\n\n    // import * as mime from \"mime-types\";\n    let mediaType = \"application/xhtml+xml\"; // mime.lookup(link.Href);\n    if (link && link.TypeLink) {\n        mediaType = link.TypeLink;\n    }\n\n    // debug(htmlStrToParse);\n    const documant = parseDOM(htmlStrToParse, mediaType);\n\n    // debug(url);\n    let urlHttp = url;\n    if (!urlHttp.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n        // urlHttp = convertCustomSchemeToHttpUrl(urlHttp);\n        urlHttp = convertHttpUrlToCustomScheme(urlHttp);\n    }\n    const url_ = new URL(urlHttp);\n\n    // const r2_GOTO = url_.searchParams.get(URL_PARAM_GOTO);\n    // const r2_GOTO_DOM_RANGE = url_.searchParams.get(URL_PARAM_GOTO_DOM_RANGE);\n    // const r2_REFRESH = url_.searchParams.get(URL_PARAM_REFRESH);\n    const r2CSS = url_.searchParams.get(URL_PARAM_CSS);\n    const r2ERS = url_.searchParams.get(URL_PARAM_EPUBREADINGSYSTEM);\n    const r2DEBUG = url_.searchParams.get(URL_PARAM_DEBUG_VISUALS);\n    const r2CLIPBOARDINTERCEPT = url_.searchParams.get(URL_PARAM_CLIPBOARD_INTERCEPT);\n    const r2SESSIONINFO = url_.searchParams.get(URL_PARAM_SESSION_INFO);\n    const r2WEBVIEWSLOT = url_.searchParams.get(URL_PARAM_WEBVIEW_SLOT);\n    const r2SECONDWEBVIEW = url_.searchParams.get(URL_PARAM_SECOND_WEBVIEW);\n\n    url_.search = \"\";\n    url_.hash = \"\";\n    const urlStr = url_.toString();\n    // debug(urlStr);\n\n    const patchElementSrc = (el: Element) => {\n        const src = el.getAttribute(\"src\");\n        if (!src || src[0] === \"/\" ||\n            /^http[s]?:\\/\\//.test(src) || /^data:\\/\\//.test(src)) {\n            return;\n        }\n        let src_ = src;\n        if (src_.startsWith(\"./\")) {\n            src_ = src_.substr(2);\n        }\n        src_ = `${urlStr}/../${src_}`;\n        const iframeUrl = new URL(src_);\n\n        if (r2CLIPBOARDINTERCEPT) {\n            iframeUrl.searchParams.append(URL_PARAM_CLIPBOARD_INTERCEPT, r2CLIPBOARDINTERCEPT);\n        }\n        if (r2SESSIONINFO) {\n            iframeUrl.searchParams.append(URL_PARAM_SESSION_INFO, r2SESSIONINFO);\n        }\n        if (r2DEBUG) {\n            iframeUrl.searchParams.append(URL_PARAM_DEBUG_VISUALS, r2DEBUG);\n        }\n        if (r2ERS) {\n            iframeUrl.searchParams.append(URL_PARAM_EPUBREADINGSYSTEM, r2ERS);\n        }\n        if (r2CSS) {\n            iframeUrl.searchParams.append(URL_PARAM_CSS, r2CSS);\n        }\n        if (r2WEBVIEWSLOT) {\n            iframeUrl.searchParams.append(URL_PARAM_WEBVIEW_SLOT, r2WEBVIEWSLOT);\n        }\n        if (r2SECONDWEBVIEW) {\n            iframeUrl.searchParams.append(URL_PARAM_SECOND_WEBVIEW, r2SECONDWEBVIEW);\n        }\n\n        iframeUrl.searchParams.append(URL_PARAM_IS_IFRAME, \"1\");\n        // debug(iframeUrl.search);\n\n        src_ = iframeUrl.toString();\n        debug(`IFRAME SRC PATCH: ${src} ==> ${src_}`);\n        el.setAttribute(\"src\", src_);\n    };\n    const processTree = (el: Element) => {\n        const elName = el.nodeName.toLowerCase();\n        if (elName === \"iframe\") {\n            patchElementSrc(el);\n        } else {\n            if (!el.childNodes) {\n                return;\n            }\n            // tslint:disable-next-line: prefer-for-of\n            for (let i = 0; i < el.childNodes.length; i++) {\n                const childNode = el.childNodes[i];\n                if (childNode.nodeType === 1) { // Node.ELEMENT_NODE\n                    processTree(childNode as Element);\n                }\n            }\n        }\n    };\n    processTree(documant.body);\n\n    const serialized = serializeDOM(documant);\n\n    const prefix = htmlStr.substr(0, iHtmlStart);\n\n    const iHtmlStart_ = serialized.indexOf(\"<html\");\n    if (iHtmlStart_ < 0) {\n        return htmlStr;\n    }\n\n    const remaining = serialized.substr(iHtmlStart_);\n    const newStr = `${prefix}${remaining}`;\n    // debug(newStr);\n    return newStr;\n};\n\nconst transformerHttpBase: TTransformFunction = (\n    publication: Publication,\n    link: Link,\n    url: string | undefined,\n    htmlStr: string,\n    sessionInfo: string | undefined,\n): string => {\n    // super hacky! (guarantees that convertCustomSchemeToHttpUrl() is necessary,\n    // unlike this `url` function parameter which is always HTTP as it originates\n    // from the streamer/server)\n    if (!_customUrlProtocolSchemeHandlerWasCalled) {\n        return htmlStr;\n    }\n\n    if (!url) {\n        return htmlStr;\n    }\n\n    const iHead = htmlStr.indexOf(\"</head>\");\n    if (iHead < 0) {\n        return htmlStr;\n    }\n\n    // debug(url);\n    let urlHttp = url;\n    if (urlHttp.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n        urlHttp = convertCustomSchemeToHttpUrl(urlHttp);\n    }\n    const url_ = new URL(urlHttp);\n    url_.search = \"\";\n    url_.hash = \"\";\n    const urlStr = url_.toString();\n    // debug(urlStr);\n\n    const baseStr = `\n<base href=\"${urlStr}\" />\n`;\n    let newStr = htmlStr.substr(0, iHead) + baseStr + htmlStr.substr(iHead);\n    // debug(newStr);\n\n    // ensure iframes are fed the original URL base\n    newStr = transformerHttpBaseIframes(\n        publication,\n        link,\n        url,\n        newStr,\n        sessionInfo);\n\n    return newStr;\n};\n\n// this workaround for registerStreamProtocol() woes works with any relative URL,\n// even script-generated dynamic ones.\nconst INJECT_HTTP_BASE = true;\n\nexport function initSessions() {\n\n    app.commandLine.appendSwitch(\"autoplay-policy\", \"no-user-gesture-required\");\n\n    // because registerStreamProtocol() breaks HTTP byte range partial requests\n    // (see streamProtocolHandler() above)\n    if (INJECT_HTTP_BASE) {\n        Transformers.instance().add(new TransformerHTML(transformerHttpBase));\n    } else {\n        Transformers.instance().add(new TransformerHTML(transformerAudioVideo));\n    }\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webframe\n    if ((protocol as any).registerStandardSchemes) {\n        (protocol as any).registerStandardSchemes([READIUM2_ELECTRON_HTTP_PROTOCOL], { secure: true });\n    } else {\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/electron/electron/blob/v5.0.0/docs/api/breaking-changes.md#privileged-schemes-registration\n        protocol.registerSchemesAsPrivileged([{\n            privileges: {\n                allowServiceWorkers: false,\n                bypassCSP: false,\n                corsEnabled: true,\n                secure: true,\n                standard: true,\n                supportFetchAPI: true,\n            },\n            scheme: READIUM2_ELECTRON_HTTP_PROTOCOL,\n        }]);\n    }\n\n    app.on(\"ready\", async () => {\n        debug(\"app ready\");\n\n        try {\n            await clearSessions();\n        } catch (err) {\n            debug(err);\n        }\n\n        // registered below (session.defaultSession.protocol === protocol)\n        // protocol.registerHttpProtocol(\n        //     READIUM2_ELECTRON_HTTP_PROTOCOL,\n        //     httpProtocolHandler,\n        //     (error: Error) => {\n        //         if (error) {\n        //             debug(error);\n        //         } else {\n        //             debug(\"registerHttpProtocol OKAY (protocol session)\");\n        //         }\n        //     });\n        if (session.defaultSession) {\n            if (USE_STREAM_PROTOCOL_INSTEAD_OF_HTTP) {\n\n                session.defaultSession.protocol.registerStreamProtocol(\n                    READIUM2_ELECTRON_HTTP_PROTOCOL,\n                    streamProtocolHandler,\n                    (error: Error) => {\n                        if (error) {\n                            debug(\"registerStreamProtocol ERROR (default session)\");\n                            debug(error);\n                        } else {\n                            debug(\"registerStreamProtocol OKAY (default session)\");\n                        }\n                    });\n            } else {\n                session.defaultSession.protocol.registerHttpProtocol(\n                    READIUM2_ELECTRON_HTTP_PROTOCOL,\n                    httpProtocolHandler,\n                    (error: Error) => {\n                        if (error) {\n                            debug(\"registerHttpProtocol ERROR (default session)\");\n                            debug(error);\n                        } else {\n                            debug(\"registerHttpProtocol OKAY (default session)\");\n                        }\n                    });\n            }\n        }\n        const webViewSession = getWebViewSession();\n        if (webViewSession) {\n            if (USE_STREAM_PROTOCOL_INSTEAD_OF_HTTP) {\n\n                webViewSession.protocol.registerStreamProtocol(\n                    READIUM2_ELECTRON_HTTP_PROTOCOL,\n                    streamProtocolHandler,\n                    (error: Error) => {\n                        if (error) {\n                            debug(\"registerStreamProtocol ERROR (webview session)\");\n                            debug(error);\n                        } else {\n                            debug(\"registerStreamProtocol OKAY (webview session)\");\n                        }\n                    });\n            } else {\n                webViewSession.protocol.registerHttpProtocol(\n                    READIUM2_ELECTRON_HTTP_PROTOCOL,\n                    httpProtocolHandler,\n                    (error: Error) => {\n                        if (error) {\n                            debug(\"registerHttpProtocol ERROR (webview session)\");\n                            debug(error);\n                        } else {\n                            debug(\"registerHttpProtocol OKAY (webview session)\");\n                        }\n                    });\n            }\n\n            webViewSession.setPermissionRequestHandler((wc, permission, callback) => {\n                debug(\"setPermissionRequestHandler\");\n                debug(wc.getURL());\n                debug(permission);\n                callback(true);\n            });\n        }\n    });\n\n    // Application-level lifecycle!\n    // async function willQuitCallback(evt: Electron.Event) {\n    //     debug(\"app will quit\");\n    //     evt.preventDefault();\n\n    //     app.removeListener(\"will-quit\", willQuitCallback);\n\n    //     try {\n    //         await clearSessions();\n    //     } catch (err) {\n    //         debug(err);\n    //     }\n    //     debug(\"Cache and StorageData cleared, now quitting...\");\n    //     app.quit();\n    // }\n\n    // app.on(\"will-quit\", willQuitCallback);\n}\n\nexport async function clearSession(sess: Electron.Session, str: string): Promise<void> {\n\n    const prom1 = sess.clearCache();\n\n    const prom2 = sess.clearStorageData({\n        origin: \"*\",\n        quotas: [\n            \"temporary\",\n            \"persistent\",\n            \"syncable\",\n        ],\n        storages: [\n            \"appcache\",\n            // \"cookies\",\n            // \"filesystem\",\n            // \"indexdb\",\n            // \"localstorage\", BLOCKS!?\n            // \"shadercache\",\n            // \"websql\",\n            \"serviceworkers\",\n        ],\n    });\n\n    try {\n        const results = await promiseAllSettled<void>([prom1, prom2]);\n        for (const result of results) {\n            debug(`SESSION CACHE + STORAGE DATA CLEARED - ${str} => ${result.status}`);\n        }\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n\nexport function getWebViewSession() {\n    return session.fromPartition(R2_SESSION_WEBVIEW, { cache: true });\n}\n\nexport async function clearWebviewSession(): Promise<void> {\n    const sess = getWebViewSession();\n    if (sess) {\n        try {\n            await clearSession(sess, \"[\" + R2_SESSION_WEBVIEW + \"]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearDefaultSession(): Promise<void> {\n    if (session.defaultSession) {\n        try {\n            await clearSession(session.defaultSession, \"[default]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearSessions(): Promise<void> {\n    try {\n        await promiseAllSettled([clearDefaultSession(), clearWebviewSession()]);\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n"]}