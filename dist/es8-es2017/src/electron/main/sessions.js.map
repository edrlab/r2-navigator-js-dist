{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/main/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\nimport * as debug_ from \"debug\";\nimport { CertificateVerifyProcRequest, app, protocol, session } from \"electron\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nimport {\n    R2_SESSION_WEBVIEW,\n    READIUM2_ELECTRON_HTTP_PROTOCOL,\n    convertCustomSchemeToHttpUrl,\n} from \"../common/sessions\";\n\nconst debug = debug_(\"r2:navigator#electron/main/sessions\");\nconst debugHttps = debug_(\"r2:https\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport function secureSessions(server: Server) {\n\n    const filter = { urls: [\"*\", \"*://*/*\"] };\n\n    const onBeforeSendHeadersCB = (details: any, callback: any) => {\n        // debug(\"onBeforeSendHeaders\");\n        // debug(details);\n\n        // details.requestHeaders[\"User-Agent\"] = \"R2 Electron\";\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info && info.trustKey && info.trustCheck && info.trustCheckIV) {\n\n                // @ts-ignorexx: TS2454 (variable is used before being assigned)\n                // instead: exclamation mark \"definite assignment\"\n                let t1!: [number, number];\n                if (IS_DEV) {\n                    t1 = process.hrtime();\n                }\n\n                const encrypteds: Buffer[] = [];\n                // encrypteds.push(info.trustCheckIV);\n                const encryptStream = crypto.createCipheriv(\"aes-256-cbc\",\n                    info.trustKey,\n                    info.trustCheckIV);\n                encryptStream.setAutoPadding(true);\n                // milliseconds since epoch (midnight, 1 Jan 1970)\n                const now = Date.now(); // +new Date()\n                const jsonStr = `{\"url\":\"${details.url}\",\"time\":${now}}`;\n                // const jsonBuff = new Buffer(jsonStr, \"utf8\");\n                const buff1 = encryptStream.update(jsonStr, \"utf8\"); // jsonBuff\n                if (buff1) {\n                    encrypteds.push(buff1);\n                }\n                const buff2 = encryptStream.final();\n                if (buff2) {\n                    encrypteds.push(buff2);\n                }\n                const encrypted = Buffer.concat(encrypteds);\n\n                const base64 = new Buffer(encrypted).toString(\"base64\");\n                details.requestHeaders[\"X-\" + info.trustCheck] = base64;\n\n                if (IS_DEV) {\n                    const t2 = process.hrtime(t1);\n                    const seconds = t2[0];\n                    const nanoseconds = t2[1];\n                    const milliseconds = nanoseconds / 1e6;\n                    // const totalNanoseconds = (seconds * 1e9) + nanoseconds;\n                    // const totalMilliseconds = totalNanoseconds / 1e6;\n                    // const totalSeconds = totalNanoseconds / 1e9;\n\n                    debugHttps(`< A > ${seconds}s ${milliseconds}ms [ ${details.url} ]`);\n                }\n            }\n        }\n        callback({ cancel: false, requestHeaders: details.requestHeaders });\n    };\n\n    const setCertificateVerifyProcCB = (\n        request: CertificateVerifyProcRequest,\n        callback: (verificationResult: number) => void) => {\n        // debug(\"setCertificateVerifyProc\");\n        // debug(request);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (request.hostname === info.urlHost) {\n                    callback(0); // OK\n                    return;\n                }\n            }\n        }\n        callback(-3); // Chromium\n        // callback(-2); // Fail\n    };\n\n    if (session.defaultSession) {\n        session.defaultSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        session.defaultSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    const webViewSession = getWebViewSession();\n    if (webViewSession) {\n        webViewSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        webViewSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    app.on(\"certificate-error\", (event, _webContents, url, _error, _certificate, callback) => {\n        // debug(\"certificate-error\");\n        // debug(url);\n        // debug(error);\n        // debug(certificate);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n                    // debug(\"certificate-error: BYPASS\");\n\n                    event.preventDefault();\n                    callback(true);\n                    return;\n                }\n            }\n        }\n\n        callback(false);\n    });\n\n    // app.on(\"select-client-certificate\", (event, _webContents, url, list, callback) => {\n    //     debug(\"select-client-certificate\");\n    //     debug(url);\n    //     debug(list);\n\n    //     if (server.isSecured()) {\n    //         const info = server.serverInfo();\n    //         if (info) {\n    //             debug(info);\n    //             if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n    //                 debug(\"select-client-certificate: BYPASS\");\n\n    //                 event.preventDefault();\n    //                 callback({ data: info.clientcert } as Certificate);\n    //                 return;\n    //             }\n    //         }\n    //     }\n\n    //     callback();\n    // });\n}\n\nconst httpProtocolHandler = (\n    request: Electron.RegisterHttpProtocolRequest,\n    callback: (redirectRequest: Electron.RedirectRequest) => void) => {\n\n    // debug(\"httpProtocolHandler:\");\n    // debug(request.url);\n    // debug(request.referrer);\n    // debug(request.method);\n\n    const url = convertCustomSchemeToHttpUrl(request.url);\n\n    callback({\n        method: request.method,\n        // referrer: request.referrer,\n        // session: getWebViewSession() session.defaultSession\n        url,\n    });\n};\n\nexport function initSessions() {\n\n    protocol.registerStandardSchemes([READIUM2_ELECTRON_HTTP_PROTOCOL], { secure: true });\n\n    app.on(\"ready\", () => {\n        debug(\"app ready\");\n\n        clearSessions(undefined, undefined);\n        // protocol.registerHttpProtocol(\n        //     READIUM2_ELECTRON_HTTP_PROTOCOL,\n        //     httpProtocolHandler,\n        //     (error: Error) => {\n        //         if (error) {\n        //             debug(error);\n        //         } else {\n        //             debug(\"registerHttpProtocol OKAY (protocol session)\");\n        //         }\n        //     });\n        if (session.defaultSession) {\n            session.defaultSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (default session)\");\n                    }\n                });\n        }\n        const webViewSession = getWebViewSession();\n        if (webViewSession) {\n            webViewSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (webview session)\");\n                    }\n                });\n\n            webViewSession.setPermissionRequestHandler((wc, permission, callback) => {\n                debug(\"setPermissionRequestHandler\");\n                debug(wc.getURL());\n                debug(permission);\n                callback(true);\n            });\n        }\n    });\n\n    function willQuitCallback(evt: Electron.Event) {\n        debug(\"app will quit\");\n\n        app.removeListener(\"will-quit\", willQuitCallback);\n\n        let done = false;\n\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            debug(\"Cache and StorageData clearance waited enough => force quitting...\");\n            app.quit();\n        }, 6000);\n\n        let sessionCleared = 0;\n        const callback = () => {\n            sessionCleared++;\n            if (sessionCleared >= 2) {\n                if (done) {\n                    return;\n                }\n                done = true;\n                debug(\"Cache and StorageData cleared, now quitting...\");\n                app.quit();\n            }\n        };\n        clearSessions(callback, callback);\n\n        evt.preventDefault();\n    }\n\n    app.on(\"will-quit\", willQuitCallback);\n}\n\nexport function clearSession(\n    sess: Electron.Session,\n    str: string,\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    sess.clearCache(() => {\n        debug(\"SESSION CACHE CLEARED - \" + str);\n        if (callbackCache) {\n            callbackCache();\n        }\n    });\n\n    // TODO: this does not seem to work (localStorage not wiped!)\n    sess.clearStorageData({\n        origin: \"*\",\n        quotas: [\n            \"temporary\",\n            \"persistent\",\n            \"syncable\",\n        ],\n        storages: [\n            \"appcache\",\n            // \"cookies\",\n            // \"filesystem\",\n            // \"indexdb\",\n            // \"localstorage\",\n            // \"shadercache\",\n            // \"websql\",\n            \"serviceworkers\",\n        ],\n    }, () => {\n        debug(\"SESSION STORAGE DATA CLEARED - \" + str);\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    });\n}\n\nexport function getWebViewSession() {\n    return session.fromPartition(R2_SESSION_WEBVIEW, { cache: true });\n}\n\nexport function clearWebviewSession(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    const sess = getWebViewSession();\n    if (sess) {\n        clearSession(sess, \"[\" + R2_SESSION_WEBVIEW + \"]\", callbackCache, callbackStorageData);\n    } else {\n        if (callbackCache) {\n            callbackCache();\n        }\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    }\n}\n\nexport function clearDefaultSession(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    if (session.defaultSession) {\n        clearSession(session.defaultSession, \"[default]\", callbackCache, callbackStorageData);\n    } else {\n        if (callbackCache) {\n            callbackCache();\n        }\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    }\n}\n\nexport function clearSessions(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    let done = false;\n\n    setTimeout(() => {\n        if (done) {\n            return;\n        }\n        done = true;\n        debug(\"Cache and StorageData clearance waited enough (default session) => force webview session...\");\n        clearWebviewSession(callbackCache, callbackStorageData);\n    }, 6000);\n\n    let sessionCleared = 0;\n    const callback = () => {\n        sessionCleared++;\n        if (sessionCleared >= 2) {\n            if (done) {\n                return;\n            }\n            done = true;\n            debug(\"Cache and StorageData cleared (default session), now webview session...\");\n            clearWebviewSession(callbackCache, callbackStorageData);\n        }\n    };\n    clearDefaultSession(callback, callback);\n}\n"]}