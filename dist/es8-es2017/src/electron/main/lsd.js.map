{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":";;;AAOA,gCAAgC;AAChC,iCAAiC;AAGjC,gDAAiD;AACjD,kDAAmD;AAInD,MAAM,KAAK,GAAG,MAAM,CAAC,gCAAgC,CAAC,CAAC;AAEhD,KAAK,UAAU,WAAW,CAC7B,kBAA0B,EAC1B,eAAiC,EACjC,mBAA2B;IAE3B,MAAM,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;IAC9E,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE;QAC1D,OAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;KAC1D;IAED,IAAI,iBAAsB,CAAC;IAC3B,IAAI;QACA,iBAAiB,GAAG,MAAM,IAAA,mBAAU,EAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;KAC9E;IAAC,OAAO,GAAG,EAAE;QACV,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC9B;IACD,IAAI,iBAAiB,EAAE;QACnB,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,iBAAiB,CAAC;QACxC,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC/C;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;AAC3C,CAAC;AAtBD,kCAsBC;AAEM,KAAK,UAAU,UAAU,CAC5B,kBAA0B,EAC1B,eAAiC,EACjC,mBAA2B,EAC3B,UAA8B;IAE9B,MAAM,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;IAC9E,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE;QAC1D,OAAO,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;KAC1D;IAED,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IACrE,IAAI,iBAAsB,CAAC;IAC3B,IAAI;QACA,iBAAiB,GAAG,MAAM,IAAA,iBAAS,EAAC,OAAO,EAAE,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;KACtF;IAAC,OAAO,GAAG,EAAE;QACV,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC9B;IACD,IAAI,iBAAiB,EAAE;QACnB,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,iBAAiB,CAAC;QACxC,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC/C;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAC1C,CAAC;AAxBD,gCAwBC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\n\nimport { IDeviceIDManager } from \"@r2-lcp-js/lsd/deviceid-manager\";\nimport { lsdRenew_ } from \"@r2-lcp-js/lsd/renew\";\nimport { lsdReturn_ } from \"@r2-lcp-js/lsd/return\";\nimport { LSD } from \"@r2-lcp-js/parser/epub/lsd\";\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nconst debug = debug_(\"r2:navigator#electron/main/lsd\");\n\nexport async function doLsdReturn(\n    publicationsServer: Server,\n    deviceIDManager: IDeviceIDManager,\n    publicationFilePath: string): Promise<LSD> {\n\n    const publication = publicationsServer.cachedPublication(publicationFilePath);\n    if (!publication || !publication.LCP || !publication.LCP.LSD) {\n        return Promise.reject(\"no publication LCP LSD data?!\");\n    }\n\n    let returnResponseLsd: LSD;\n    try {\n        returnResponseLsd = await lsdReturn_(publication.LCP.LSD, deviceIDManager);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    if (returnResponseLsd) {\n        publication.LCP.LSD = returnResponseLsd;\n        return Promise.resolve(publication.LCP.LSD);\n    }\n    return Promise.reject(\"doLsdReturn?!\");\n}\n\nexport async function doLsdRenew(\n    publicationsServer: Server,\n    deviceIDManager: IDeviceIDManager,\n    publicationFilePath: string,\n    endDateStr: string | undefined): Promise<LSD> {\n\n    const publication = publicationsServer.cachedPublication(publicationFilePath);\n    if (!publication || !publication.LCP || !publication.LCP.LSD) {\n        return Promise.reject(\"no publication LCP LSD data?!\");\n    }\n\n    const endDate = endDateStr ? moment(endDateStr).toDate() : undefined;\n    let returnResponseLsd: LSD;\n    try {\n        returnResponseLsd = await lsdRenew_(endDate, publication.LCP.LSD, deviceIDManager);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    if (returnResponseLsd) {\n        publication.LCP.LSD = returnResponseLsd;\n        return Promise.resolve(publication.LCP.LSD);\n    }\n    return Promise.reject(\"doLsdRenew?!\");\n}\n"]}