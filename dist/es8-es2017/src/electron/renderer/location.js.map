{"version":3,"file":"location.js","sourceRoot":"","sources":["../../../../../src/electron/renderer/location.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { ipcRenderer, shell } from \"electron\";\nimport { URL } from \"url\";\n\nimport { Locator, LocatorLocations } from \"@r2-shared-js/models/locator\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\nimport { encodeURIComponent_RFC3986 } from \"@r2-utils-js/_utils/http/UrlUtils\";\n\nimport { IDocInfo } from \"../common/document\";\nimport {\n    IEventPayload_R2_EVENT_LINK, IEventPayload_R2_EVENT_LOCATOR_VISIBLE,\n    IEventPayload_R2_EVENT_PAGE_TURN, IEventPayload_R2_EVENT_READING_LOCATION,\n    IEventPayload_R2_EVENT_SCROLLTO, IEventPayload_R2_EVENT_SHIFT_VIEW_X, R2_EVENT_LINK,\n    R2_EVENT_LOCATOR_VISIBLE, R2_EVENT_PAGE_TURN, R2_EVENT_PAGE_TURN_RES, R2_EVENT_READING_LOCATION,\n    R2_EVENT_SCROLLTO, R2_EVENT_SHIFT_VIEW_X,\n} from \"../common/events\";\nimport { IPaginationInfo } from \"../common/pagination\";\nimport { ISelectionInfo } from \"../common/selection\";\nimport {\n    READIUM2_ELECTRON_HTTP_PROTOCOL, convertCustomSchemeToHttpUrl, convertHttpUrlToCustomScheme,\n} from \"../common/sessions\";\nimport {\n    URL_PARAM_CSS, URL_PARAM_DEBUG_VISUALS, URL_PARAM_EPUBREADINGSYSTEM, URL_PARAM_GOTO,\n    URL_PARAM_PREVIOUS, URL_PARAM_REFRESH,\n} from \"./common/url-params\";\nimport { getEpubReadingSystemInfo } from \"./epubReadingSystem\";\nimport { __computeReadiumCssJsonMessage, isRTL } from \"./readium-css\";\nimport {\n    IReadiumElectronBrowserWindow, IReadiumElectronWebview, isScreenReaderMounted,\n} from \"./webview/state\";\n\nimport URI = require(\"urijs\");\n\n// import * as uuidv4 from \"uuid/v4\";\n\nconst debug = debug_(\"r2:navigator#electron/renderer/location\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport function locationHandleIpcMessage(\n    eventChannel: string,\n    eventArgs: any[],\n    eventCurrentTarget: IReadiumElectronWebview): boolean {\n\n    // (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n    const activeWebView = eventCurrentTarget;\n\n    if (eventChannel === R2_EVENT_LOCATOR_VISIBLE) {\n        // noop\n    } else if (eventChannel === R2_EVENT_SHIFT_VIEW_X) {\n        // if (!activeWebView) {\n        //     return true;\n        // }\n        shiftWebview(activeWebView,\n            (eventArgs[0] as IEventPayload_R2_EVENT_SHIFT_VIEW_X).offset,\n            (eventArgs[0] as IEventPayload_R2_EVENT_SHIFT_VIEW_X).backgroundColor);\n    } else if (eventChannel === R2_EVENT_PAGE_TURN_RES) {\n        // if (!activeWebView) {\n        //     return true;\n        // }\n        const publication = (window as IReadiumElectronBrowserWindow).READIUM2.publication;\n        const publicationURL = (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL;\n        if (!publication) {\n            return true;\n        }\n\n        const payload = eventArgs[0] as IEventPayload_R2_EVENT_PAGE_TURN;\n\n        const goPREVIOUS = payload.go === \"PREVIOUS\"; // any other value is NEXT\n\n        if (!activeWebView.READIUM2.link) {\n            debug(\"WEBVIEW READIUM2_LINK ??!!\");\n            return true;\n        }\n\n        let nextOrPreviousSpineItem: Link | undefined;\n        if (publication.Spine) {\n            for (let i = 0; i < publication.Spine.length; i++) {\n                if (publication.Spine[i] === activeWebView.READIUM2.link) {\n                    if (goPREVIOUS && (i - 1) >= 0) {\n                        nextOrPreviousSpineItem = publication.Spine[i - 1];\n                    } else if (!goPREVIOUS && (i + 1) < publication.Spine.length) {\n                        nextOrPreviousSpineItem = publication.Spine[i + 1];\n                    }\n                    break;\n                }\n            }\n        }\n        if (!nextOrPreviousSpineItem) {\n            return true;\n        }\n        if (publicationURL) {\n            const uri = new URL(nextOrPreviousSpineItem.Href, publicationURL);\n            uri.hash = \"\";\n            uri.search = \"\";\n            const urlNoQueryParams = uri.toString(); // publicationURL + \"/../\" + nextOrPreviousSpineItem.Href;\n            // NOTE that decodeURIComponent() must be called on the toString'ed URL urlNoQueryParams\n            // tslint:disable-next-line:max-line-length\n            // (in case nextOrPreviousSpineItem.Href contains Unicode characters, in which case they get percent-encoded by the URL.toString())\n            handleLink(urlNoQueryParams, goPREVIOUS, false);\n        }\n    } else if (eventChannel === R2_EVENT_READING_LOCATION) {\n        const payload = eventArgs[0] as IEventPayload_R2_EVENT_READING_LOCATION;\n\n        // if (!activeWebView) {\n        //     return true;\n        // }\n        if (activeWebView.READIUM2.link && _saveReadingLocation) {\n            // TODO: position metrics, based on arbitrary number of characters (1034)\n            // https://github.com/readium/architecture/tree/master/positions\n            // https://github.com/readium/architecture/tree/master/locators#about-the-notion-of-position\n            // https://github.com/readium/architecture/blob/master/locators/locator-api.md\n            // if (typeof payload.progression !== \"undefined\" && _publication && activeWebView.READIUM2.link) {\n            //     const totalPositions = _publication.getTotalPositions(activeWebView.READIUM2.link);\n            //     if (totalPositions) {\n            //         payload.position = totalPositions * payload.progression;\n            //         const totalSpinePositions = _publication.getTotalSpinePositions();\n            //         if (totalSpinePositions) {\n            //             payload.globalProgression = payload.position / totalSpinePositions;\n            //         }\n            //     }\n            // }\n            _saveReadingLocation(activeWebView.READIUM2.link.Href, payload);\n        }\n    } else if (eventChannel === R2_EVENT_LINK) {\n        // debug(\"R2_EVENT_LINK (webview.addEventListener('ipc-message')\");\n        const payload = eventArgs[0] as IEventPayload_R2_EVENT_LINK;\n        handleLinkUrl(payload.url);\n    } else {\n        return false;\n    }\n    return true;\n}\n\n// see webview.addEventListener(\"ipc-message\", ...)\n// needed for main process browserWindow.webContents.send()\nipcRenderer.on(R2_EVENT_LINK, (_event: any, payload: IEventPayload_R2_EVENT_LINK) => {\n    debug(\"R2_EVENT_LINK (ipcRenderer.on)\");\n    debug(payload.url);\n    handleLinkUrl(payload.url);\n});\n\nexport function shiftWebview(webview: IReadiumElectronWebview, offset: number, backgroundColor: string | undefined) {\n    if (!offset) {\n        webview.style.transform = \"none\";\n        // if (_slidingViewport) {\n        //     _slidingViewport.style.backgroundColor = \"white\";\n        // }\n    } else {\n        // console.log(`backgroundColor:::::::::: ${backgroundColor}`);\n        if (backgroundColor) {\n            const domSlidingViewport = (window as IReadiumElectronBrowserWindow).READIUM2.domSlidingViewport;\n            domSlidingViewport.style.backgroundColor = backgroundColor;\n        }\n        webview.style.transform = `translateX(${offset}px)`;\n    }\n}\n\nexport function navLeftOrRight(left: boolean, spineNav?: boolean) {\n    const publication = (window as IReadiumElectronBrowserWindow).READIUM2.publication;\n    const publicationURL = (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL;\n    if (!publication || !publicationURL) {\n        return;\n    }\n\n    // metadata-level RTL\n    const rtl = isRTL();\n\n    if (spineNav) {\n        if (!publication.Spine) {\n            return;\n        }\n\n        if (!_lastSavedReadingLocation) { // getCurrentReadingLocation()\n            return;\n        }\n        const loc = _lastSavedReadingLocation;\n\n        // document-level RTL\n        const rtl_ = loc.docInfo && loc.docInfo.isRightToLeft;\n        if (rtl_ !== rtl) {\n            debug(`RTL differ?! METADATA ${rtl} vs. DOCUMENT ${rtl_}`);\n        }\n\n        // array boundaries overflow are checked further down ...\n        const offset = (left ? -1 : 1) * (rtl ? -1 : 1);\n\n        const currentSpineIndex = publication.Spine.findIndex((link) => {\n            return link.Href === loc.locator.href;\n        });\n        if (currentSpineIndex >= 0) {\n            const spineIndex = currentSpineIndex + offset;\n\n            // array boundaries overflow are checked here:\n            if (spineIndex >= 0 && spineIndex <= (publication.Spine.length - 1)) {\n                const nextOrPreviousSpineItem = publication.Spine[spineIndex];\n\n                // handleLinkUrl(publicationURL + \"/../\" + nextOrPreviousSpineItem.Href);\n\n                const uri = new URL(nextOrPreviousSpineItem.Href, publicationURL);\n                uri.hash = \"\";\n                uri.search = \"\";\n                const urlNoQueryParams = uri.toString(); // publicationURL + \"/../\" + nextOrPreviousSpineItem.Href;\n                // NOTE that decodeURIComponent() must be called on the toString'ed URL urlNoQueryParams\n                // tslint:disable-next-line:max-line-length\n                // (in case nextOrPreviousSpineItem.Href contains Unicode characters, in which case they get percent-encoded by the URL.toString())\n                handleLink(urlNoQueryParams, false, false);\n\n                return;\n            } else {\n                shell.beep(); // announce boundary overflow (first or last Spine item)\n            }\n        }\n    } else {\n        const goPREVIOUS = left ? !rtl : rtl;\n        const payload: IEventPayload_R2_EVENT_PAGE_TURN = {\n            direction: rtl ? \"RTL\" : \"LTR\",\n            go: goPREVIOUS ? \"PREVIOUS\" : \"NEXT\",\n        };\n        const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n        if (activeWebView) {\n            setTimeout(async () => {\n                await activeWebView.send(R2_EVENT_PAGE_TURN, payload); // .getWebContents()\n            }, 0);\n        }\n    }\n}\n\nexport function handleLink(href: string, previous: boolean | undefined, useGoto: boolean) {\n\n    const special = href.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\");\n    if (special) {\n        const okay = loadLink(href, previous, useGoto);\n        if (!okay) {\n            debug(`Readium link fail?! ${href}`);\n        }\n    } else {\n        const okay = loadLink(href, previous, useGoto);\n        if (!okay) {\n            if (/^http[s]?:\\/\\/127\\.0\\.0\\.1/.test(href)) { // href.startsWith(\"https://127.0.0.1\")\n                debug(`Internal link, fails to match publication document: ${href}`);\n            } else {\n                debug(`External link: ${href}`);\n\n                // tslint:disable-next-line:no-floating-promises\n                (async () => {\n                    try {\n                        await shell.openExternal(href);\n                    } catch (err) {\n                        debug(err);\n                    }\n                })();\n            }\n        }\n    }\n}\n\nexport function handleLinkUrl(href: string) {\n    handleLink(href, undefined, false);\n}\n\nexport function handleLinkLocator(location: Locator | undefined) {\n\n    const publication = (window as IReadiumElectronBrowserWindow).READIUM2.publication;\n    const publicationURL = (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL;\n\n    if (!publication || !publicationURL) {\n        return;\n    }\n\n    let linkToLoad: Link | undefined;\n    let linkToLoadGoto: LocatorLocations | undefined;\n    if (location && location.href) {\n        if (publication.Spine && publication.Spine.length) {\n            linkToLoad = publication.Spine.find((spineLink) => {\n                return spineLink.Href === location.href;\n            });\n            if (linkToLoad && location.locations) {\n                linkToLoadGoto = location.locations;\n            }\n        }\n        if (!linkToLoad &&\n            publication.Resources && publication.Resources.length) {\n            linkToLoad = publication.Resources.find((resLink) => {\n                return resLink.Href === location.href;\n            });\n            if (linkToLoad && location.locations) {\n                linkToLoadGoto = location.locations;\n            }\n        }\n    }\n    if (!linkToLoad) {\n        if (publication.Spine && publication.Spine.length) {\n            const firstLinear = publication.Spine[0];\n            if (firstLinear) {\n                linkToLoad = firstLinear;\n            }\n        }\n    }\n\n    if (linkToLoad) {\n        const useGoto = typeof linkToLoadGoto !== \"undefined\"\n            // && typeof linkToLoadGoto.cssSelector !== \"undefined\"\n            ;\n        const uri = new URL(linkToLoad.Href, publicationURL);\n        uri.hash = \"\";\n        uri.search = \"\";\n        const urlNoQueryParams = uri.toString(); // publicationURL + \"/../\" + linkToLoad.Href;\n        const hrefToLoad = urlNoQueryParams +\n            ((useGoto) ? (\"?\" + URL_PARAM_GOTO + \"=\" +\n                encodeURIComponent_RFC3986(Buffer.from(JSON.stringify(linkToLoadGoto, null, \"\")).toString(\"base64\"))) :\n                \"\");\n        // NOTE that decodeURIComponent() must be called on the toString'ed URL hrefToLoad\n        // tslint:disable-next-line:max-line-length\n        // (in case linkToLoad.Href contains Unicode characters, in which case they get percent-encoded by the URL.toString())\n        handleLink(hrefToLoad, undefined, useGoto);\n    }\n}\n\nlet _reloadCounter = 0;\nexport function reloadContent() {\n    const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n    if (!activeWebView) {\n        return;\n    }\n\n    setTimeout(() => {\n        // const src = activeWebView.getAttribute(\"src\");\n        activeWebView.READIUM2.forceRefresh = true;\n        if (activeWebView.READIUM2.link) {\n            const uri = new URL(activeWebView.READIUM2.link.Href,\n                (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL);\n            uri.hash = \"\";\n            uri.search = \"\";\n            const urlNoQueryParams = uri.toString();\n            handleLinkUrl(urlNoQueryParams);\n        }\n        // activeWebView.reloadIgnoringCache();\n    }, 0);\n}\n\nfunction loadLink(hrefFull: string, previous: boolean | undefined, useGoto: boolean): boolean {\n\n    const publication = (window as IReadiumElectronBrowserWindow).READIUM2.publication;\n    const publicationURL = (window as IReadiumElectronBrowserWindow).READIUM2.publicationURL;\n    if (!publication || !publicationURL) {\n        return false;\n    }\n\n    if (hrefFull.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n        hrefFull = convertCustomSchemeToHttpUrl(hrefFull);\n    }\n\n    const pubJsonUri = publicationURL.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\") ?\n        convertCustomSchemeToHttpUrl(publicationURL) : publicationURL;\n\n    let linkPath: string | undefined;\n\n    const urlToLink = new URL(hrefFull);\n    urlToLink.hash = \"\";\n    urlToLink.search = \"\";\n    const urlPublication = new URL(pubJsonUri);\n    urlPublication.hash = \"\";\n    urlPublication.search = \"\";\n    let iBreak = -1;\n    for (let i = 0; i < urlPublication.pathname.length; i++) {\n        const c1 = urlPublication.pathname[i];\n        if (i < urlToLink.pathname.length) {\n            const c2 = urlToLink.pathname[i];\n            if (c1 !== c2) {\n                iBreak = i;\n                break;\n            }\n        } else {\n            break;\n        }\n    }\n    if (iBreak > 0) {\n        linkPath = urlToLink.pathname.substr(iBreak);\n    }\n\n    if (!linkPath) {\n        return false;\n    }\n\n    // because URL.toString() percent-encodes Unicode characters in the path!\n    linkPath = decodeURIComponent(linkPath);\n\n    // const pubUri = new URI(pubJsonUri);\n    // // \"/pub/BASE64_PATH/manifest.json\" ==> \"/pub/BASE64_PATH/\"\n    // const pathPrefix = decodeURIComponent(pubUri.path().replace(\"manifest.json\", \"\"));\n    // // \"/pub/BASE64_PATH/epub/chapter.html\" ==> \"epub/chapter.html\"\n    // const normPath = decodeURIComponent(linkUri.normalizePath().path());\n    // const linkPath = normPath.replace(pathPrefix, \"\");\n\n    let pubLink = publication.Spine ? publication.Spine.find((spineLink) => {\n        return spineLink.Href === linkPath;\n    }) : undefined;\n    if (!pubLink) {\n        pubLink = publication.Resources.find((spineLink) => {\n            return spineLink.Href === linkPath;\n        });\n    }\n\n    if (!pubLink) {\n        debug(\"FATAL WEBVIEW READIUM2_LINK ??!! \" + hrefFull + \" ==> \" + linkPath);\n        return false;\n    }\n\n    // Note that with URI (unlike URL) if hrefFull contains Unicode characters,\n    // the toString() function does not percent-encode them.\n    // But also note that if hrefFull is already percent-encoded, this is returned as-is!\n    // (i.e. do not expect toString() to output Unicode chars from their escaped notation)\n    // See decodeURIComponent() above,\n    // which is necessary in cases where loadLink() is called with URL.toString() for hrefFull\n    // ... which it is!\n    const linkUri = new URI(hrefFull);\n    linkUri.search((data: any) => {\n        // overrides existing (leaves others intact)\n\n        if (typeof previous === \"undefined\") {\n            // erase unwanted forward of query param during linking\n            data[URL_PARAM_PREVIOUS] = undefined;\n            // delete data[URL_PARAM_PREVIOUS];\n        } else {\n            data[URL_PARAM_PREVIOUS] = previous ? \"true\" : \"false\";\n        }\n\n        if (!useGoto) {\n            // erase unwanted forward of query param during linking\n            data[URL_PARAM_GOTO] = undefined;\n            // delete data[URL_PARAM_GOTO];\n        }\n    });\n    if (useGoto) {\n        linkUri.hash(\"\").normalizeHash();\n    }\n\n    // no need for encodeURIComponent_RFC3986, auto-encoded by URI class\n\n    const rcssJson = __computeReadiumCssJsonMessage(pubLink);\n    const rcssJsonstr = JSON.stringify(rcssJson, null, \"\");\n    const rcssJsonstrBase64 = Buffer.from(rcssJsonstr).toString(\"base64\");\n\n    const rersJson = getEpubReadingSystemInfo();\n    const rersJsonstr = JSON.stringify(rersJson, null, \"\");\n    const rersJsonstrBase64 = Buffer.from(rersJsonstr).toString(\"base64\");\n\n    linkUri.search((data: any) => {\n        // overrides existing (leaves others intact)\n\n        // tslint:disable-next-line:no-string-literal\n        data[URL_PARAM_CSS] = rcssJsonstrBase64;\n\n        // tslint:disable-next-line:no-string-literal\n        data[URL_PARAM_EPUBREADINGSYSTEM] = rersJsonstrBase64;\n\n        // tslint:disable-next-line:no-string-literal\n        data[URL_PARAM_DEBUG_VISUALS] = (IS_DEV && (window as IReadiumElectronBrowserWindow).READIUM2.DEBUG_VISUALS) ?\n            \"true\" : \"false\";\n    });\n\n    const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n\n    const webviewNeedsForcedRefresh = activeWebView && activeWebView.READIUM2.forceRefresh;\n    if (activeWebView) {\n        activeWebView.READIUM2.forceRefresh = undefined;\n    }\n    const webviewNeedsHardRefresh =\n        ((window as IReadiumElectronBrowserWindow).READIUM2.enableScreenReaderAccessibilityWebViewHardRefresh\n        && isScreenReaderMounted());\n\n    if (!webviewNeedsHardRefresh && !webviewNeedsForcedRefresh &&\n        activeWebView && activeWebView.READIUM2.link === pubLink) {\n\n        const goto = useGoto ? linkUri.search(true)[URL_PARAM_GOTO] as string : undefined;\n        const hash = useGoto ? undefined : linkUri.fragment(); // without #\n\n        debug(\"WEBVIEW ALREADY LOADED: \" + pubLink.Href);\n\n        const payload: IEventPayload_R2_EVENT_SCROLLTO = {\n            goto,\n            hash,\n            previous: previous ? true : false,\n        };\n\n        if (IS_DEV) {\n            const msgStr = JSON.stringify(payload);\n            debug(msgStr);\n        }\n        if (activeWebView) {\n            if (activeWebView.style.transform !== \"none\") {\n\n                setTimeout(async () => {\n                    await activeWebView.send(\"R2_EVENT_HIDE\");\n                }, 0);\n\n                setTimeout(async () => {\n                    shiftWebview(activeWebView, 0, undefined); // reset\n                    await activeWebView.send(R2_EVENT_SCROLLTO, payload);\n                }, 10);\n            } else {\n                setTimeout(async () => {\n                    await activeWebView.send(R2_EVENT_SCROLLTO, payload);\n                }, 0);\n            }\n        }\n\n        return true;\n\n        // const webviewToReuse = wv1AlreadyLoaded ? _webview1 : _webview2;\n        // // const otherWebview = webviewToReuse === _webview2 ? _webview1 : _webview2;\n        // if (webviewToReuse !== activeWebView) {\n\n        //     debug(\"INTO VIEW ...\");\n\n        //     const slidingView = document.getElementById(ELEMENT_ID_SLIDING_VIEWPORT) as HTMLElement;\n        //     if (slidingView) {\n        //         let animate = true;\n        //         if (goto || hash) {\n        //             debug(\"DISABLE ANIM\");\n        //             animate = false;\n        //         } else if (previous) {\n        //             if (!slidingView.classList.contains(CLASS_SHIFT_LEFT)) {\n        //                 debug(\"DISABLE ANIM\");\n        //                 animate = false;\n        //             }\n        //         }\n        //         if (animate) {\n        //             if (!slidingView.classList.contains(CLASS_ANIMATED)) {\n        //                 slidingView.classList.add(CLASS_ANIMATED);\n        //                 slidingView.style.transition = \"left 500ms ease-in-out\";\n        //             }\n        //         } else {\n        //             if (slidingView.classList.contains(CLASS_ANIMATED)) {\n        //                 slidingView.classList.remove(CLASS_ANIMATED);\n        //                 slidingView.style.transition = \"none\";\n        //             }\n        //         }\n        //         if (slidingView.classList.contains(CLASS_SHIFT_LEFT)) {\n        //             slidingView.classList.remove(CLASS_SHIFT_LEFT);\n        //             slidingView.style.left = \"0\";\n\n        //             // if (_webview1.classList.contains(CLASS_POS_RIGHT)) {\n        //             //     // activeWebView === _webview1;\n        //             // } else {\n        //             //     // activeWebView === _webview2;\n        //             // }\n        //         } else {\n        //             slidingView.classList.add(CLASS_SHIFT_LEFT);\n        //             slidingView.style.left = \"-100%\";\n\n        //             // if (_webview2.classList.contains(CLASS_POS_RIGHT)) {\n        //             //     // activeWebView === _webview1;\n        //             // } else {\n        //             //     // activeWebView === _webview2;\n        //             // }\n        //         }\n        //     }\n        // }\n    }\n\n    // if (!isFixedLayout(pubLink)) {\n    //     if (_rootHtmlElement) {\n    //         _rootHtmlElement.dispatchEvent(new Event(DOM_EVENT_HIDE_VIEWPORT));\n    //     }\n    // }\n\n    if (activeWebView) {\n\n        if (webviewNeedsForcedRefresh) {\n            linkUri.search((data: any) => {\n                // overrides existing (leaves others intact)\n\n                // uuidv4();\n                data[URL_PARAM_REFRESH] = `${++_reloadCounter}`;\n            });\n        }\n        const uriStr = linkUri.toString();\n\n        const needConvert = publicationURL.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\");\n        const uriStr_ = uriStr.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\") ?\n            uriStr : (needConvert ? convertHttpUrlToCustomScheme(uriStr) : uriStr);\n\n        // if (IS_DEV) {\n        //     debug(\"####### >>> ---\");\n        //     debug(activeWebView.READIUM2.id);\n        //     debug(pubLink.Href);\n        //     debug(uriStr);\n        //     debug(linkUri.hash()); // with #\n        //     debug(linkUri.fragment()); // without #\n        //     // tslint:disable-next-line:no-string-literal\n        //     const gto = linkUri.search(true)[URL_PARAM_GOTO];\n        //     debug(gto ? (Buffer.from(gto, \"base64\").toString(\"utf8\")) : \"\"); // decodeURIComponent\n        //     // tslint:disable-next-line:no-string-literal\n        //     debug(linkUri.search(true)[URL_PARAM_PREVIOUS]);\n        //     // tslint:disable-next-line:no-string-literal\n        //     debug(linkUri.search(true)[URL_PARAM_CSS]);\n        //     debug(\"####### >>> ---\");\n        // }\n\n        if (webviewNeedsHardRefresh) {\n            if (IS_DEV) {\n                debug(`___HARD___ WEBVIEW REFRESH: ${uriStr_}`);\n            }\n\n            (window as IReadiumElectronBrowserWindow).READIUM2.destroyActiveWebView();\n            (window as IReadiumElectronBrowserWindow).READIUM2.createActiveWebView();\n            const newActiveWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n            if (newActiveWebView) {\n                newActiveWebView.READIUM2.link = pubLink;\n                newActiveWebView.setAttribute(\"src\", uriStr_);\n            }\n            return true;\n        } else {\n            if (IS_DEV) {\n                debug(`___SOFT___ WEBVIEW REFRESH: ${uriStr_}`);\n            }\n\n            const webviewAlreadyHasContent = (typeof activeWebView.READIUM2.link !== \"undefined\")\n                && activeWebView.READIUM2.link !== null;\n            activeWebView.READIUM2.link = pubLink;\n\n            if (activeWebView.style.transform !== \"none\") {\n                // activeWebView.setAttribute(\"src\", \"data:, \");\n\n                if (webviewAlreadyHasContent) {\n\n                    setTimeout(async () => {\n                        await activeWebView.send(\"R2_EVENT_HIDE\");\n                    }, 0);\n                }\n\n                setTimeout(() => {\n                    shiftWebview(activeWebView, 0, undefined); // reset\n                    activeWebView.setAttribute(\"src\", uriStr_);\n                }, 10);\n            } else {\n                activeWebView.setAttribute(\"src\", uriStr_);\n            }\n        }\n    }\n\n    // activeWebView.getWebContents().loadURL(uriStr_, { extraHeaders: \"pragma: no-cache\\n\" });\n    // activeWebView.loadURL(uriStr_, { extraHeaders: \"pragma: no-cache\\n\" });\n\n    // ALWAYS FALSE => let's comment for now...\n    // const enableOffScreenRenderPreload = false;\n    // if (enableOffScreenRenderPreload) {\n    //     setTimeout(() => {\n    //         if (!publication || !pubLink) {\n    //             return;\n    //         }\n\n    //         const otherWebview = activeWebView === _webview2 ? _webview1 : _webview2;\n\n    //         // let inSpine = true;\n    //         const index = publication.Spine.indexOf(pubLink);\n    //         // if (!index) {\n    //         //     inSpine = false;\n    //         //     index = publication.Resources.indexOf(pubLink);\n    //         // }\n    //         if (index >= 0 &&\n    //             previous && (index - 1) >= 0 ||\n    //             !previous && (index + 1) < publication.Spine.length\n    //             // (index + 1) < (inSpine ? publication.Spine.length : publication.Resources.length)\n    //         ) {\n    //             const nextPubLink = publication.Spine[previous ? (index - 1) : (index + 1)];\n    //             // (inSpine ? publication.Spine[index + 1] : publication.Resources[index + 1]);\n\n    //             if (otherWebview.READIUM2.link !== nextPubLink) {\n    //                 const linkUriNext = new URI(publicationURL + \"/../\" + nextPubLink.Href);\n    //                 linkUriNext.normalizePath();\n    //                 linkUriNext.search((data: any) => {\n    //                     // overrides existing (leaves others intact)\n\n    //                     // tslint:disable-next-line:no-string-literal\n    //                     data[URL_PARAM_CSS] = rcssJsonstrBase64;\n    //                 });\n    //                 const uriStrNext = linkUriNext.toString();\n\n    //                 debug(\"####### ======\");\n    //                 debug(otherWebview.READIUM2.id);\n    //                 debug(nextPubLink.Href);\n    //                 debug(linkUriNext.hash()); // with #\n    //                 debug(linkUriNext.fragment()); // without #\n    //                 // tslint:disable-next-line:no-string-literal\n    //                 debug(linkUriNext.search(true)[URL_PARAM_GOTO]);\n    //                 // tslint:disable-next-line:no-string-literal\n    //                 debug(linkUriNext.search(true)[URL_PARAM_PREVIOUS]);\n    //                 debug(\"####### ======\");\n    //                 otherWebview.READIUM2.link = nextPubLink;\n    //                 otherWebview.setAttribute(\"src\", uriStrNext);\n    //             }\n    //         }\n    //     }, 300);\n    // }\n\n    return true;\n}\n\nexport interface LocatorExtended {\n    locator: Locator;\n    paginationInfo: IPaginationInfo | undefined;\n    selectionInfo: ISelectionInfo | undefined;\n    selectionIsNew: boolean | undefined;\n    docInfo: IDocInfo | undefined;\n}\n\nlet _lastSavedReadingLocation: LocatorExtended | undefined;\nexport function getCurrentReadingLocation(): LocatorExtended | undefined {\n    return _lastSavedReadingLocation;\n}\nlet _readingLocationSaver: ((locator: LocatorExtended) => void) | undefined;\nconst _saveReadingLocation = (docHref: string, locator: IEventPayload_R2_EVENT_READING_LOCATION) => {\n    _lastSavedReadingLocation = {\n        docInfo: locator.docInfo,\n        locator: {\n            href: docHref,\n            locations: {\n                cfi: locator.locations.cfi ?\n                    locator.locations.cfi : undefined,\n                cssSelector: locator.locations.cssSelector ?\n                    locator.locations.cssSelector : undefined,\n                position: (typeof locator.locations.position !== \"undefined\") ?\n                    locator.locations.position : undefined,\n                progression: (typeof locator.locations.progression !== \"undefined\") ?\n                    locator.locations.progression : undefined,\n            },\n            text: locator.text,\n            title: locator.title,\n        },\n        paginationInfo: locator.paginationInfo,\n        selectionInfo: locator.selectionInfo,\n        selectionIsNew: locator.selectionIsNew,\n    };\n\n    if (IS_DEV) {\n        // debug(\">->->\", JSON.stringify(_lastSavedReadingLocation, null, \"  \"));\n        debug(\">->->\");\n        debug(_lastSavedReadingLocation);\n    }\n\n    if (_readingLocationSaver) {\n        _readingLocationSaver(_lastSavedReadingLocation);\n    }\n\n    // // tslint:disable-next-line:no-floating-promises\n    // (async () => {\n    //     try {\n    //         const visible = await isLocatorVisible(_lastSavedReadingLocation.locator);\n    //         debug(`isLocatorVisible async: ${visible}`);\n    //     } catch (err) {\n    //         debug(err);\n    //     }\n    // })();\n};\nexport function setReadingLocationSaver(func: (locator: LocatorExtended) => void) {\n    _readingLocationSaver = func;\n}\n\nexport async function isLocatorVisible(locator: Locator): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n        const activeWebView = (window as IReadiumElectronBrowserWindow).READIUM2.getActiveWebView();\n\n        if (!activeWebView) {\n            reject(\"No navigator webview?!\");\n            return;\n        }\n        if (!activeWebView.READIUM2.link) {\n            reject(\"No navigator webview link?!\");\n            return;\n        }\n        if (activeWebView.READIUM2.link.Href !== locator.href) {\n            // debug(`isLocatorVisible FALSE: ${activeWebView.READIUM2.link.Href} !== ${locator.href}`);\n            resolve(false);\n            return;\n        }\n\n        // const cb = (_event: any, payload: IEventPayload_R2_EVENT_LOCATOR_VISIBLE) => {\n        //     debug(\"R2_EVENT_LOCATOR_VISIBLE\");\n        //     debug(payload.visible);\n        // };\n        // ipcRenderer.once(R2_EVENT_LOCATOR_VISIBLE, cb);\n\n        const cb = (event: Electron.IpcMessageEvent) => {\n            if (event.channel === R2_EVENT_LOCATOR_VISIBLE) {\n                const webview = event.currentTarget as IReadiumElectronWebview;\n                if (webview !== activeWebView) {\n                    reject(\"Wrong navigator webview?!\");\n                    return;\n                }\n                const payloadPong = event.args[0] as IEventPayload_R2_EVENT_LOCATOR_VISIBLE;\n                // debug(`isLocatorVisible: ${payload_.visible}`);\n                activeWebView.removeEventListener(\"ipc-message\", cb);\n                resolve(payloadPong.visible);\n            }\n        };\n        activeWebView.addEventListener(\"ipc-message\", cb);\n        const payloadPing: IEventPayload_R2_EVENT_LOCATOR_VISIBLE = { location: locator.locations, visible: false };\n\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_LOCATOR_VISIBLE, payloadPing);\n        }, 0);\n    });\n}\n"]}