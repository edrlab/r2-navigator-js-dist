{"version":3,"file":"highlight.js","sourceRoot":"","sources":["../../../../../src/electron/common/highlight.ts"],"names":[],"mappings":";;;AAea,QAAA,2BAA2B,GAAG,CAAC,CAAC;AAChC,QAAA,0BAA0B,GAAG,CAAC,CAAC;AAC/B,QAAA,8BAA8B,GAAG,CAAC,CAAC;AA2BhD,SAAgB,6BAA6B,CAAC,MAAc,EAAE,KAAc;IACxE,IAAI,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YAC3B,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5D,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAElC,OAAO,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;IAClI,CAAC;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AAXD,sEAWC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { ISelectionInfo } from \"./selection\";\n\nexport interface IColor {\n    red: number;\n    green: number;\n    blue: number;\n}\n\nexport const HighlightDrawTypeBackground = 0;\nexport const HighlightDrawTypeUnderline = 1;\nexport const HighlightDrawTypeStrikethrough = 2;\n\nexport interface IHighlight {\n    id: string;\n    selectionInfo?: ISelectionInfo;\n    range?: Range,\n    color: IColor;\n    pointerInteraction: boolean;\n\n    // 0 is full background (default), 1 is underline, 2 is strikethrough\n    drawType?: number;\n\n    expand?: number;\n}\n\nexport interface IHighlightDefinition {\n    selectionInfo: ISelectionInfo | undefined;\n    range?: Range,\n\n    color: IColor | undefined;\n\n    // 0 is full background (default), 1 is underline, 2 is strikethrough\n    drawType?: number;\n\n    expand?: number;\n}\n\nexport function convertColorHexadecimalToRGBA(cssHex: string, alpha?: number): string | undefined {\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(cssHex)) {\n        const hex = cssHex.substring(1);\n        const hex_ = hex.length === 3 ?\n            `0x${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}` :\n            `0x${hex[0]}${hex[1]}${hex[2]}${hex[3]}${hex[4]}${hex[5]}`;\n        const hexVal = parseInt(hex_, 16);\n        // tslint:disable-next-line: no-bitwise\n        return `rgb${alpha ? \"a\" : \"\"}(${(hexVal >> 16) & 255}, ${(hexVal >> 8) & 255}, ${hexVal & 255}${alpha ? `, ${alpha}` : \"\"})`;\n    }\n    return undefined;\n}\n"]}