{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AAGjC,8BAAgC;AAChC,qCAAmC;AAEnC,2CAAoF;AAIpF,IAAM,KAAK,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAE7C,2BAAkC,kBAA0B;IAA5D,iBAmEC;IAjEG,kBAAO,CAAC,EAAE,CAAC,8BAAqB,EAAE,UAC9B,KAAU,EACV,mBAA2B,EAC3B,OAAe,EACf,WAAoB;;;;;oBAIhB,IAAI,GAAG,KAAK,CAAC;;;;oBAEN,WAAM,UAAU,CAAC,mBAAmB,EAAE,OAAO,EAAE,WAAW,CAAC,EAAA;;oBAAlE,IAAI,GAAG,SAA2D,CAAC;;;;oBAEnE,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,IAAI,GAAG,KAAK,CAAC;;;oBAIjB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACP,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;4BACd,aAAa,GAAG,OAAO,CAAC;wBAC5B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACE,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;4BAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;4BACzB,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAG3C,CAAC;oBACL,CAAC;oBAED,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EACvC,IAAI,EACJ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,mBAAmB,CAAC,EACzC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CACxC,CAAC;;;;SACL,CAAC,CAAC;IAEH,oBAA0B,mBAA2B,EAAE,OAAe,EAAE,WAAoB;;;;;;wBAClF,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;wBAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;4BACnC,MAAM,KAAC,KAAK,EAAC;wBACjB,CAAC;wBAID,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;4BACd,UAAU,GAAG,OAAO,CAAC;wBACzB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACE,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;4BAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;4BACzB,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAGxC,CAAC;;;;wBAKG,WAAM,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,EAAA;;wBAA/C,SAA+C,CAAC;;;;wBAEhD,KAAK,CAAC,KAAG,CAAC,CAAC;wBACX,KAAK,CAAC,sCAAsC,GAAG,KAAG,CAAC,CAAC;wBACpD,WAAO,KAAK,EAAC;4BAEjB,WAAO,IAAI,EAAC;;;;KACf;AACL,CAAC;AAnED,8CAmEC","sourcesContent":["import * as crypto from \"crypto\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\n\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\n\n// import { ITryLcpUserKeyResult } from \"@r2-lcp-js/parser/epub/lcp\";\n\nconst debug = debug_(\"r2:electron:main:lcp\");\n\nexport function installLcpHandler(publicationsServer: Server) {\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n        let okay = false;\n        try {\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n\n        let passSha256Hex: string | undefined;\n        if (okay) {\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n        }\n\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n            okay,\n            (okay ? \"Correct.\" : \"Please try again.\"),\n            passSha256Hex ? passSha256Hex : \"xxx\",\n        );\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP) {\n            return false;\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        // let okay: ITryLcpUserKeyResult;\n        try {\n            // okay =\n            await publication.LCP.tryUserKeys([lcpPassHex]);\n        } catch (err) {\n            debug(err);\n            debug(\"FAIL publication.LCP.tryUserKeys(): \" + err);\n            return false;\n        }\n        return true;\n    }\n}\n"]}