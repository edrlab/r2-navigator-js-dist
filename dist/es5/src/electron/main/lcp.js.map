{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport { injectFileInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\r\nimport { Server } from \"@r2-streamer-js/http/server\";\r\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\r\nimport * as debug_ from \"debug\";\r\nimport { ipcMain } from \"electron\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\r\nimport { installLsdHandler } from \"./lsd\";\r\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\r\n\r\nconst debug = debug_(\"r2:electron:main:lcp\");\r\n\r\nexport function installLcpHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\r\n    installLsdHandler(publicationsServer, deviceIDManager);\r\n\r\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\r\n        event: any,\r\n        publicationFilePath: string,\r\n        lcpPass: string,\r\n        isSha256Hex: boolean) => {\r\n\r\n        // debug(publicationFilePath);\r\n        // debug(lcpPass);\r\n        let okay = false;\r\n        try {\r\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\r\n        } catch (err) {\r\n            debug(err);\r\n            okay = false;\r\n        }\r\n\r\n        let passSha256Hex: string | undefined;\r\n        if (okay) {\r\n            if (isSha256Hex) {\r\n                passSha256Hex = lcpPass;\r\n            } else {\r\n                const checkSum = crypto.createHash(\"sha256\");\r\n                checkSum.update(lcpPass);\r\n                passSha256Hex = checkSum.digest(\"hex\");\r\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\r\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\r\n            }\r\n        }\r\n\r\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\r\n            okay,\r\n            (okay ? \"Correct.\" : \"Please try again.\"),\r\n            passSha256Hex ? passSha256Hex : \"xxx\",\r\n        );\r\n    });\r\n\r\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\r\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\r\n        if (!publication) {\r\n            return false;\r\n        }\r\n\r\n        let lcpPassHex: string | undefined;\r\n\r\n        if (isSha256Hex) {\r\n            lcpPassHex = lcpPass;\r\n        } else {\r\n            const checkSum = crypto.createHash(\"sha256\");\r\n            checkSum.update(lcpPass);\r\n            lcpPassHex = checkSum.digest(\"hex\");\r\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\r\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\r\n        }\r\n\r\n        let okay = false;\r\n        try {\r\n            okay = await publication.LCP.setUserPassphrase(lcpPassHex);\r\n        } catch (err) {\r\n            debug(err);\r\n            okay = false;\r\n        }\r\n        if (!okay) {\r\n            debug(\"FAIL publication.LCP.setUserPassphrase()\");\r\n        }\r\n        return okay;\r\n    }\r\n}\r\n\r\nexport async function downloadFromLCPL(filePath: string, dir: string, destFileName: string): Promise<string[]> {\r\n\r\n    return new Promise<string[]>(async (resolve, reject) => {\r\n\r\n        const lcplStr = fs.readFileSync(filePath, { encoding: \"utf8\" });\r\n        // debug(lcplStr);\r\n        const lcplJson = global.JSON.parse(lcplStr);\r\n        const lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\r\n        if (lcpl.Links) {\r\n            const pubLink = lcpl.Links.find((link) => {\r\n                return link.Rel === \"publication\";\r\n            });\r\n            if (pubLink) {\r\n\r\n                const destPathTMP = path.join(dir, destFileName + \".tmp\");\r\n                const destPathFINAL = path.join(dir, destFileName);\r\n\r\n                const failure = (err: any) => {\r\n                    debug(err);\r\n                    reject(pubLink.Href + \" (\" + err + \")\");\r\n                };\r\n\r\n                const success = async (response: request.RequestResponse) => {\r\n\r\n                    Object.keys(response.headers).forEach((header: string) => {\r\n                        debug(header + \" => \" + response.headers[header]);\r\n                    });\r\n\r\n                    if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n                        failure(\"HTTP CODE \" + response.statusCode);\r\n                        return;\r\n                    }\r\n\r\n                    const destStreamTMP = fs.createWriteStream(destPathTMP);\r\n                    response.pipe(destStreamTMP);\r\n                    // response.on(\"end\", () => {\r\n                    // });\r\n                    destStreamTMP.on(\"finish\", () => {\r\n\r\n                        const zipError = (err: any) => {\r\n                            debug(err);\r\n                            reject(destPathTMP + \" (\" + err + \")\");\r\n                        };\r\n\r\n                        const doneCallback = () => {\r\n                            setTimeout(() => {\r\n                                fs.unlinkSync(destPathTMP);\r\n                            }, 1000);\r\n\r\n                            resolve([destPathFINAL, pubLink.Href]);\r\n                        };\r\n                        const zipEntryPath = \"META-INF/license.lcpl\";\r\n\r\n                        injectFileInZip(destPathTMP, destPathFINAL, filePath, zipEntryPath, zipError, doneCallback);\r\n                    });\r\n                };\r\n\r\n                // No response streaming! :(\r\n                // https://github.com/request/request-promise/issues/90\r\n                const needsStreamingResponse = true;\r\n                if (needsStreamingResponse) {\r\n                    request.get({\r\n                        headers: {},\r\n                        method: \"GET\",\r\n                        uri: pubLink.Href,\r\n                    })\r\n                        .on(\"response\", success)\r\n                        .on(\"error\", failure);\r\n                } else {\r\n                    let response: requestPromise.FullResponse;\r\n                    try {\r\n                        // tslint:disable-next-line:await-promise no-floating-promises\r\n                        response = await requestPromise({\r\n                            headers: {},\r\n                            method: \"GET\",\r\n                            resolveWithFullResponse: true,\r\n                            uri: pubLink.Href,\r\n                        });\r\n                    } catch (err) {\r\n                        failure(err);\r\n                        return;\r\n                    }\r\n\r\n                    await success(response);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n"]}