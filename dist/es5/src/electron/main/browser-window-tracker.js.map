{"version":3,"file":"browser-window-tracker.js","sourceRoot":"","sources":["../../../../../src/electron/main/browser-window-tracker.ts"],"names":[],"mappings":";;AAOA,8BAAgC;AAChC,qCAA+B;AAE/B,2CAA8E;AAC9E,+CAAqE;AAErE,IAAM,KAAK,GAAG,MAAM,CAAC,mDAAmD,CAAC,CAAC;AAE1E,IAAI,uBAAiD,CAAC;AAEtD,IAAI,UAA8B,CAAC;AAEnC,SAAgB,kBAAkB,CAAC,GAA2B,EAAE,SAAkB;IAE9E,UAAU,GAAG,SAAS,CAAC;IAEvB,IAAI,CAAC,uBAAuB,EAAE;QAC1B,uBAAuB,GAAG,EAAE,CAAC;KAChC;IACD,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAElC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE;QACb,IAAM,CAAC,GAAG,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,GAAG,CAAC,EAAE;YACP,OAAO;SACV;QACD,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACP,CAAC;AAhBD,gDAgBC;AAGD,cAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAC,IAAI,EAAE,EAAE;IACpC,EAAE,CAAC,EAAE,CAAC,qBAAqB,EAAE,UAAC,KAAK,EAAE,cAAc,EAAE,MAAM;QACvD,KAAK,CAAC,+BAA+B,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAKpD,cAAc,CAAC,gBAAgB,GAAG,KAAK,CAAC;QACxC,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC;QACjC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC;QAClC,cAAc,CAAC,eAAe,GAAG,KAAK,CAAC;QACvC,cAAc,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAC/C,cAAc,CAAC,2BAA2B,GAAG,KAAK,CAAC;QAEnD,IAAM,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,0CAA+B,CAAC;YAChE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC9C,CAAC,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAE/C,CAAC;QAEV,IAAI,IAAI,EAAE;YACN,KAAK,CAAC,oCAAoC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YACzD,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE;QACrB,OAAO;KACV;IAED,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE;QAC7D,OAAO;KACV;IACD,uBAAuB,CAAC,OAAO,CAAC,UAAC,GAAG;QAChC,IAAI,EAAE,CAAC,eAAe,CAAC,EAAE,KAAK,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE;YAC9C,KAAK,CAAC,8BAA8B,CAAC,CAAC;YAEtC,EAAE,CAAC,EAAE,CAAC,eAAe,EAAE,UAAC,KAAK,EAAE,GAAG;gBAC9B,KAAK,CAAC,6CAA6C,CAAC,CAAC;gBAGrD,KAAK,CAAC,GAAG,CAAC,CAAC;gBAEX,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBACpC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAEb,KAAK,CAAC,cAAc,EAAE,CAAC;gBAEvB,IAAM,OAAO,GAAgC;oBACzC,GAAG,KAAA;iBACN,CAAC;gBAEF,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,sBAAa,EAAE,OAAO,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACN;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { app } from \"electron\";\n\nimport { IEventPayload_R2_EVENT_LINK, R2_EVENT_LINK } from \"../common/events\";\nimport { READIUM2_ELECTRON_HTTP_PROTOCOL } from \"../common/sessions\";\n\nconst debug = debug_(\"r2:navigator#electron/main/browser-window-tracker\");\n\nlet _electronBrowserWindows: Electron.BrowserWindow[];\n\nlet _serverURL: string | undefined;\n\nexport function trackBrowserWindow(win: Electron.BrowserWindow, serverURL?: string) {\n\n    _serverURL = serverURL;\n\n    if (!_electronBrowserWindows) {\n        _electronBrowserWindows = [];\n    }\n    _electronBrowserWindows.push(win);\n\n    win.on(\"closed\", () => {\n        const i = _electronBrowserWindows.indexOf(win);\n        if (i < 0) {\n            return;\n        }\n        _electronBrowserWindows.splice(i, 1);\n    });\n}\n\n// https://github.com/electron/electron/blob/master/docs/tutorial/security.md#how-9\napp.on(\"web-contents-created\", (_evt, wc) => {\n    wc.on(\"will-attach-webview\", (event, webPreferences, params) => {\n        debug(\"WEBVIEW will-attach-webview: \" + params.src);\n\n        // delete webPreferences.preload;\n        // delete webPreferences.preloadURL;\n\n        webPreferences.contextIsolation = false;\n        webPreferences.javascript = true;\n        webPreferences.webSecurity = true;\n        webPreferences.nodeIntegration = false;\n        webPreferences.nodeIntegrationInWorker = false;\n        webPreferences.allowRunningInsecureContent = false;\n\n        const fail = !params.src.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL) &&\n            (_serverURL ? !params.src.startsWith(_serverURL) :\n                !(/^http[s]?:\\/\\/127\\.0\\.0\\.1/.test(params.src))\n                // (!params.src.startsWith(\"https://127.0.0.1\") && !params.src.startsWith(\"http://127.0.0.1\"))\n                );\n\n        if (fail) {\n            debug(\"WEBVIEW will-attach-webview FAIL: \" + params.src);\n            event.preventDefault();\n        }\n    });\n\n    if (!wc.hostWebContents) {\n        return;\n    }\n\n    if (!_electronBrowserWindows || !_electronBrowserWindows.length) {\n        return;\n    }\n    _electronBrowserWindows.forEach((win) => {\n        if (wc.hostWebContents.id === win.webContents.id) {\n            debug(\"WEBVIEW web-contents-created\");\n\n            wc.on(\"will-navigate\", (event, url) => {\n                debug(\"webview.getWebContents().on('will-navigate'\");\n\n                // debug(event.sender);\n                debug(url);\n\n                const wcUrl = event.sender.getURL();\n                debug(wcUrl);\n\n                event.preventDefault();\n\n                const payload: IEventPayload_R2_EVENT_LINK = {\n                    url,\n                };\n                // ipcMain.emit\n                win.webContents.send(R2_EVENT_LINK, payload);\n            });\n        }\n    });\n});\n"]}