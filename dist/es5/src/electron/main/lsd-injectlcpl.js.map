{"version":3,"file":"lsd-injectlcpl.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-injectlcpl.ts"],"names":[],"mappings":";;;AAOA,8BAAgC;AAChC,uBAAyB;AACzB,uCAA2C;AAE3C,kDAAiD;AAEjD,mEAAwE;AAExE,IAAM,KAAK,GAAG,MAAM,CAAC,2CAA2C,CAAC,CAAC;AAElE,SAAsB,kBAAkB,CACpC,OAAe,EACf,WAAwB,EACxB,eAAuB;;;;;YAEjB,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5C,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEV,YAAY,GAAG,uBAAuB,CAAC;YAG7C,IAAI;gBACA,IAAI,GAAG,gBAAM,CAAC,WAAW,CAAM,QAAQ,EAAE,SAAG,CAAC,CAAC;aACjD;YAAC,OAAO,KAAK,EAAE;gBACZ,WAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;aAChC;YACD,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;YAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC;YASvB,WAAO,IAAI,OAAO,CAAM,UAAO,OAAO,EAAE,MAAM;;;wBACpC,kBAAkB,GAAG,eAAe,GAAG,MAAM,CAAC;wBACpD,+BAAiB,CAAC,eAAe,EAAE,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,YAAY,EAC7F,UAAC,GAAG;4BACA,MAAM,CAAC,GAAG,CAAC,CAAC;wBAChB,CAAC,EACD;4BACI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BAErC,UAAU,CAAC;gCACP,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;gCAC/B,UAAU,CAAC;oCACP,EAAE,CAAC,UAAU,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;oCACnD,OAAO,CAAC,eAAe,CAAC,CAAC;gCAC7B,CAAC,EAAE,GAAG,CAAC,CAAC;4BACZ,CAAC,EAAE,GAAG,CAAC,CAAC;wBACZ,CAAC,CAAC,CAAC;;;qBACV,CAAC,EAAC;;;CACN;AA9CD,gDA8CC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport { JSON as TAJSON } from \"ta-json-x\";\n\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { injectBufferInZip } from \"@r2-utils-js/_utils/zip/zipInjector\";\n\nconst debug = debug_(\"r2:navigator#electron/main/lsd-injectlcpl\");\n\nexport async function lsdLcpUpdateInject(\n    lcplStr: string,\n    publication: Publication,\n    publicationPath: string): Promise<string> {\n\n    const lcplJson = global.JSON.parse(lcplStr);\n    debug(lcplJson);\n\n    const zipEntryPath = \"META-INF/license.lcpl\";\n\n    let lcpl: LCP;\n    try {\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n    } catch (erorz) {\n        return Promise.reject(erorz);\n    }\n    lcpl.ZipPath = zipEntryPath;\n    lcpl.JsonSource = lcplStr;\n    lcpl.init();\n    publication.LCP = lcpl;\n\n    // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n    // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n    // application/vnd.readium.lcp.license.v1.0+json (NEW)\n    // application/vnd.readium.license.status.v1.0+json (LSD)\n    // const mime = \"application/vnd.readium.lcp.license.v1.0+json\";\n    // publication.AddLink(mime, [\"license\"], lcpl.ZipPath, false);\n\n    return new Promise<any>(async (resolve, reject) => {\n        const newPublicationPath = publicationPath + \".new\";\n        injectBufferInZip(publicationPath, newPublicationPath, Buffer.from(lcplStr, \"utf8\"), zipEntryPath,\n            (err) => {\n                reject(err);\n            },\n            () => {\n                debug(\"EPUB license.lcpl injected.\");\n\n                setTimeout(() => {\n                    fs.unlinkSync(publicationPath);\n                    setTimeout(() => {\n                        fs.renameSync(newPublicationPath, publicationPath);\n                        resolve(publicationPath);\n                    }, 500);\n                }, 500);\n            });\n    });\n}\n"]}