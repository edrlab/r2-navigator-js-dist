{"version":3,"file":"lsd-injectlcpl.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-injectlcpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\n\r\nimport { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\r\nimport { injectBufferInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\r\nimport { Publication } from \"@r2-streamer-js/models/publication\";\r\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\r\nimport * as debug_ from \"debug\";\r\nimport * as moment from \"moment\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nconst debug = debug_(\"r2:electron:main:lsd\");\r\n\r\nexport async function lsdLcpUpdateInject(\r\n    lcplStr: string,\r\n    publication: Publication,\r\n    publicationPath: string): Promise<string> {\r\n\r\n    const lcplJson = global.JSON.parse(lcplStr);\r\n    debug(lcplJson);\r\n\r\n    const zipEntryPath = \"META-INF/license.lcpl\";\r\n\r\n    let lcpl: LCP;\r\n    try {\r\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\r\n    } catch (erorz) {\r\n        return Promise.reject(erorz);\r\n    }\r\n    lcpl.ZipPath = zipEntryPath;\r\n    lcpl.JsonSource = lcplStr;\r\n    lcpl.init();\r\n    publication.LCP = lcpl;\r\n    // publication.AddLink(\"application/vnd.readium.lcp.license-1.0+json\", [\"license\"],\r\n    //     lcpl.ZipPath, false);\r\n\r\n    return new Promise<any>(async (resolve, reject) => {\r\n        const newPublicationPath = publicationPath + \".new\";\r\n        injectBufferInZip(publicationPath, newPublicationPath, Buffer.from(lcplStr, \"utf8\"), zipEntryPath,\r\n            (err) => {\r\n                reject(err);\r\n            },\r\n            () => {\r\n                debug(\"EPUB license.lcpl injected.\");\r\n\r\n                setTimeout(() => {\r\n                    fs.unlinkSync(publicationPath);\r\n                    setTimeout(() => {\r\n                        fs.renameSync(newPublicationPath, publicationPath);\r\n                        resolve(publicationPath);\r\n                    }, 500);\r\n                }, 500);\r\n            });\r\n    });\r\n}\r\n\r\nexport async function lsdLcpUpdate(\r\n    lsdJson: any,\r\n    publication: Publication): Promise<string> {\r\n\r\n    if (lsdJson.updated && lsdJson.updated.license &&\r\n        (publication.LCP.Updated || publication.LCP.Issued)) {\r\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\r\n        const updatedLicense = moment(publication.LCP.Updated || publication.LCP.Issued);\r\n        const forceUpdate = false; // just for testing!\r\n        if (forceUpdate ||\r\n            updatedLicense.isBefore(updatedLicenseLSD)) {\r\n            debug(\"LSD license updating...\");\r\n            if (lsdJson.links) {\r\n                const licenseLink = lsdJson.links.find((link: any) => {\r\n                    return link.rel === \"license\";\r\n                });\r\n                if (!licenseLink) {\r\n                    return Promise.reject(\"LSD license link is missing.\");\r\n                }\r\n\r\n                debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\r\n\r\n                return new Promise<any>(async (resolve, reject) => {\r\n\r\n                    const failure = (err: any) => {\r\n                        reject(err);\r\n                    };\r\n\r\n                    const success = async (response: request.RequestResponse) => {\r\n\r\n                        Object.keys(response.headers).forEach((header: string) => {\r\n                            debug(header + \" => \" + response.headers[header]);\r\n                        });\r\n\r\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n                            if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\r\n                                licenseLink.href = licenseLink.href.replace(\"/licenses/\", \"/api/v1/purchases/license/\");\r\n                                debug(\"TRYING AGAIN: \" + licenseLink.href);\r\n                                let newRes: any;\r\n                                try {\r\n                                    newRes = await lsdLcpUpdate(lsdJson, publication); // recursive\r\n                                } catch (err) {\r\n                                    failure(err);\r\n                                    return;\r\n                                }\r\n                                resolve(newRes);\r\n                            } else {\r\n                                failure(\"HTTP CODE \" + response.statusCode);\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        let responseData: Buffer;\r\n                        try {\r\n                            responseData = await streamToBufferPromise(response);\r\n                        } catch (err) {\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        if (!responseData) {\r\n                            return;\r\n                        }\r\n                        const lcplStr = responseData.toString(\"utf8\");\r\n                        debug(lcplStr);\r\n                        resolve(lcplStr);\r\n                    };\r\n\r\n                    const headers = {\r\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\r\n                    };\r\n\r\n                    // No response streaming! :(\r\n                    // https://github.com/request/request-promise/issues/90\r\n                    const needsStreamingResponse = true;\r\n                    if (needsStreamingResponse) {\r\n                        request.get({\r\n                            headers,\r\n                            method: \"GET\",\r\n                            uri: licenseLink.href,\r\n                        })\r\n                            .on(\"response\", success)\r\n                            .on(\"error\", failure);\r\n                    } else {\r\n                        let response: requestPromise.FullResponse;\r\n                        try {\r\n                            // tslint:disable-next-line:await-promise no-floating-promises\r\n                            response = await requestPromise({\r\n                                headers,\r\n                                method: \"GET\",\r\n                                resolveWithFullResponse: true,\r\n                                uri: licenseLink.href,\r\n                            });\r\n                        } catch (err) {\r\n                            failure(err);\r\n                            return;\r\n                        }\r\n\r\n                        await success(response);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return Promise.reject(\"No LSD LCP update.\");\r\n}\r\n"]}