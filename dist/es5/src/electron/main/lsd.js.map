{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":";;;AACA,8CAAgD;AAChD,gDAAkD;AAElD,8BAAgC;AAChC,+BAAiC;AAEjC,IAAM,KAAK,GAAG,MAAM,CAAC,gCAAgC,CAAC,CAAC;AAEvD,qBACI,kBAA0B,EAC1B,eAAiC,EACjC,mBAA2B;;;;;;oBAErB,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/D,MAAM,KAAC,OAAO,CAAC,MAAM,CAAC,+BAA+B,CAAC,EAAC;oBAC3D,CAAC;;;;oBAIuB,WAAM,kBAAS,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,EAAA;;oBAA7E,iBAAiB,GAAG,SAAyD,CAAC;oBAC9E,WAAW,CAAC,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC;oBAC5C,WAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAC;;;oBAE1C,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;;;CAElC;AAnBD,kCAmBC;AAED,oBACI,kBAA0B,EAC1B,eAAiC,EACjC,mBAA2B,EAC3B,UAAkB;;;;;;oBAEZ,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/D,MAAM,KAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAC;oBAC7C,CAAC;oBAEK,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;;;;oBAGpD,WAAM,gBAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,EAAA;;oBAArF,iBAAiB,GAAG,SAAiE,CAAC;oBACtF,WAAW,CAAC,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC;oBAC5C,WAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAC;;;oBAE1C,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;;;CAElC;AArBD,gCAqBC","sourcesContent":["import { IDeviceIDManager } from \"@r2-lcp-js/lsd/deviceid-manager\";\nimport { lsdRenew } from \"@r2-lcp-js/lsd/renew\";\nimport { lsdReturn } from \"@r2-lcp-js/lsd/return\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\n\nconst debug = debug_(\"r2:navigator#electron/main/lsd\");\n\nexport async function doLsdReturn(\n    publicationsServer: Server,\n    deviceIDManager: IDeviceIDManager,\n    publicationFilePath: string): Promise<any> {\n\n    const publication = publicationsServer.cachedPublication(publicationFilePath);\n    if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n        return Promise.reject(\"no publication LCP LSD data?!\");\n    }\n\n    let renewResponseJson: any;\n    try {\n        renewResponseJson = await lsdReturn(publication.LCP.LSDJson, deviceIDManager);\n        publication.LCP.LSDJson = renewResponseJson;\n        return Promise.resolve(renewResponseJson);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n}\n\nexport async function doLsdRenew(\n    publicationsServer: Server,\n    deviceIDManager: IDeviceIDManager,\n    publicationFilePath: string,\n    endDateStr: string): Promise<any> {\n\n    const publication = publicationsServer.cachedPublication(publicationFilePath);\n    if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n        return Promise.reject(\"Internal error!\");\n    }\n\n    const endDate = endDateStr.length ? moment(endDateStr).toDate() : undefined;\n    let renewResponseJson: any;\n    try {\n        renewResponseJson = await lsdRenew(endDate, publication.LCP.LSDJson, deviceIDManager);\n        publication.LCP.LSDJson = renewResponseJson;\n        return Promise.resolve(renewResponseJson);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n}\n"]}