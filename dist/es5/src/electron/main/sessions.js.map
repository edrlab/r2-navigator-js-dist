{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/main/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { CertificateVerifyProcRequest, app, protocol, session } from \"electron\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nimport {\n    R2_SESSION_WEBVIEW,\n    READIUM2_ELECTRON_HTTP_PROTOCOL,\n    convertCustomSchemeToHttpUrl,\n} from \"../common/sessions\";\n\nconst debug = debug_(\"r2:navigator#electron/main/sessions\");\n\nexport function secureSessions(server: Server) {\n\n    const filter = { urls: [\"*\", \"*://*/*\"] };\n\n    // https://github.com/electron/electron/blob/master/docs/tutorial/security.md#csp-http-header\n    const onHeadersReceivedCB = (details: any, callback: any) => {\n        // debug(\"onHeadersReceived\");\n        // debug(details);\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if ((serverUrl && details.url.startsWith(serverUrl)) ||\n            details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n\n            callback({ responseHeaders: {\n                ...details.responseHeaders,\n                \"Content-Security-Policy\":\n                    // tslint:disable-next-line:max-line-length\n                    [`default-src 'self' 'unsafe-inline' 'unsafe-eval' data: http: https: ${READIUM2_ELECTRON_HTTP_PROTOCOL}: ${serverUrl}`],\n            } });\n        } else {\n            callback({});\n        }\n    };\n\n    const onBeforeSendHeadersCB = (details: any, callback: any) => {\n        // debug(\"onBeforeSendHeaders\");\n        // debug(details);\n\n        // details.requestHeaders[\"User-Agent\"] = \"R2 Electron\";\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if (server.isSecured() &&\n            ((serverUrl && details.url.startsWith(serverUrl)) ||\n            details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\"))) {\n\n            const header = server.getSecureHTTPHeader(details.url);\n            if (header) {\n                details.requestHeaders[header.name] = header.value;\n            }\n            callback({ cancel: false, requestHeaders: details.requestHeaders });\n        } else {\n            callback({ cancel: false });\n        }\n    };\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#session\n    const setCertificateVerifyProcCB = (\n        request: CertificateVerifyProcRequest,\n        callback: (verificationResult: number) => void) => {\n        // debug(\"setCertificateVerifyProc\");\n        // debug(request);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (request.hostname === info.urlHost) {\n                    callback(0); // OK\n                    return;\n                }\n            }\n        }\n        callback(-3); // Chromium\n        // callback(-2); // Fail\n    };\n\n    if (session.defaultSession) {\n        session.defaultSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        session.defaultSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        session.defaultSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    const webViewSession = getWebViewSession();\n    if (webViewSession) {\n        webViewSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        webViewSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        webViewSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    app.on(\"certificate-error\", (event, _webContents, url, _error, _certificate, callback) => {\n        // debug(\"certificate-error\");\n        // debug(url);\n        // debug(error);\n        // debug(certificate);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n                    // debug(\"certificate-error: BYPASS\");\n\n                    event.preventDefault();\n                    callback(true);\n                    return;\n                }\n            }\n        }\n\n        callback(false);\n    });\n\n    // app.on(\"select-client-certificate\", (event, _webContents, url, list, callback) => {\n    //     debug(\"select-client-certificate\");\n    //     debug(url);\n    //     debug(list);\n\n    //     if (server.isSecured()) {\n    //         const info = server.serverInfo();\n    //         if (info) {\n    //             debug(info);\n    //             if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n    //                 debug(\"select-client-certificate: BYPASS\");\n\n    //                 event.preventDefault();\n    //                 callback({ data: info.clientcert } as Certificate);\n    //                 return;\n    //             }\n    //         }\n    //     }\n\n    //     callback();\n    // });\n}\n\nconst httpProtocolHandler = (\n    request: Electron.RegisterHttpProtocolRequest,\n    callback: (redirectRequest: Electron.RedirectRequest) => void) => {\n\n    // debug(\"httpProtocolHandler:\");\n    // debug(request.url);\n    // debug(request.referrer);\n    // debug(request.method);\n\n    const url = convertCustomSchemeToHttpUrl(request.url);\n\n    callback({\n        method: request.method,\n        // referrer: request.referrer,\n        // session: getWebViewSession() session.defaultSession\n        url,\n    });\n};\n\nexport function initSessions() {\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webframe\n    protocol.registerStandardSchemes([READIUM2_ELECTRON_HTTP_PROTOCOL], { secure: true });\n\n    app.on(\"ready\", () => {\n        debug(\"app ready\");\n\n        clearSessions(undefined, undefined);\n\n        // registered below (session.defaultSession.protocol === protocol)\n        // protocol.registerHttpProtocol(\n        //     READIUM2_ELECTRON_HTTP_PROTOCOL,\n        //     httpProtocolHandler,\n        //     (error: Error) => {\n        //         if (error) {\n        //             debug(error);\n        //         } else {\n        //             debug(\"registerHttpProtocol OKAY (protocol session)\");\n        //         }\n        //     });\n        if (session.defaultSession) {\n            session.defaultSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (default session)\");\n                    }\n                });\n        }\n        const webViewSession = getWebViewSession();\n        if (webViewSession) {\n            webViewSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (webview session)\");\n                    }\n                });\n\n            webViewSession.setPermissionRequestHandler((wc, permission, callback) => {\n                debug(\"setPermissionRequestHandler\");\n                debug(wc.getURL());\n                debug(permission);\n                callback(true);\n            });\n        }\n    });\n\n    function willQuitCallback(evt: Electron.Event) {\n        debug(\"app will quit\");\n\n        app.removeListener(\"will-quit\", willQuitCallback);\n\n        let done = false;\n\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            debug(\"Cache and StorageData clearance waited enough => force quitting...\");\n            app.quit();\n        }, 6000);\n\n        let sessionCleared = 0;\n        const callback = () => {\n            sessionCleared++;\n            if (sessionCleared >= 2) {\n                if (done) {\n                    return;\n                }\n                done = true;\n                debug(\"Cache and StorageData cleared, now quitting...\");\n                app.quit();\n            }\n        };\n        clearSessions(callback, callback);\n\n        evt.preventDefault();\n    }\n\n    app.on(\"will-quit\", willQuitCallback);\n}\n\nexport function clearSession(\n    sess: Electron.Session,\n    str: string,\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    sess.clearCache(() => {\n        debug(\"SESSION CACHE CLEARED - \" + str);\n        if (callbackCache) {\n            callbackCache();\n        }\n    });\n\n    // TODO: this does not seem to work (localStorage not wiped!)\n    sess.clearStorageData({\n        origin: \"*\",\n        quotas: [\n            \"temporary\",\n            \"persistent\",\n            \"syncable\",\n        ],\n        storages: [\n            \"appcache\",\n            // \"cookies\",\n            // \"filesystem\",\n            // \"indexdb\",\n            // \"localstorage\",\n            // \"shadercache\",\n            // \"websql\",\n            \"serviceworkers\",\n        ],\n    }, () => {\n        debug(\"SESSION STORAGE DATA CLEARED - \" + str);\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    });\n}\n\nexport function getWebViewSession() {\n    return session.fromPartition(R2_SESSION_WEBVIEW, { cache: true });\n}\n\nexport function clearWebviewSession(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    const sess = getWebViewSession();\n    if (sess) {\n        clearSession(sess, \"[\" + R2_SESSION_WEBVIEW + \"]\", callbackCache, callbackStorageData);\n    } else {\n        if (callbackCache) {\n            callbackCache();\n        }\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    }\n}\n\nexport function clearDefaultSession(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    if (session.defaultSession) {\n        clearSession(session.defaultSession, \"[default]\", callbackCache, callbackStorageData);\n    } else {\n        if (callbackCache) {\n            callbackCache();\n        }\n        if (callbackStorageData) {\n            callbackStorageData();\n        }\n    }\n}\n\nexport function clearSessions(\n    callbackCache: (() => void) | undefined,\n    callbackStorageData: (() => void) | undefined) {\n\n    let done = false;\n\n    setTimeout(() => {\n        if (done) {\n            return;\n        }\n        done = true;\n        debug(\"Cache and StorageData clearance waited enough (default session) => force webview session...\");\n        clearWebviewSession(callbackCache, callbackStorageData);\n    }, 6000);\n\n    let sessionCleared = 0;\n    const callback = () => {\n        sessionCleared++;\n        if (sessionCleared >= 2) {\n            if (done) {\n                return;\n            }\n            done = true;\n            debug(\"Cache and StorageData cleared (default session), now webview session...\");\n            clearWebviewSession(callbackCache, callbackStorageData);\n        }\n    };\n    clearDefaultSession(callback, callback);\n}\n"]}