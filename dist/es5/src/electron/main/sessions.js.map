{"version":3,"file":"sessions.js","sourceRoot":"","sources":["../../../../../src/electron/main/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport {\n    CallbackRedirectRequest, HandlerRequest, ProcRequest, app, protocol, session,\n} from \"electron\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\n\nimport {\n    R2_SESSION_WEBVIEW, READIUM2_ELECTRON_HTTP_PROTOCOL, convertCustomSchemeToHttpUrl,\n} from \"../common/sessions\";\n\nconst debug = debug_(\"r2:navigator#electron/main/sessions\");\n\ninterface PromiseFulfilled<T> {\n    status: \"fulfilled\";\n    value: T;\n}\ninterface PromiseRejected {\n    status: \"rejected\";\n    reason: any;\n}\n\nasync function promiseAllSettled<T>(promises: Array<Promise<T>>):\n    Promise<Array<(PromiseFulfilled<T> | PromiseRejected)>> {\n\n    const promises_ = promises.map(async (promise) => {\n        return promise\n            .then<PromiseFulfilled<T>>((value) => {\n                return {\n                    status: \"fulfilled\",\n                    value,\n                };\n            })\n            .catch((reason) => {\n                return {\n                    reason,\n                    status: \"rejected\",\n                } as PromiseRejected;\n            });\n    });\n    return Promise.all(promises_);\n}\n\nexport function secureSessions(server: Server) {\n\n    const filter = { urls: [\"*://*/*\"] };\n\n    // https://github.com/electron/electron/blob/master/docs/tutorial/security.md#csp-http-header\n    const onHeadersReceivedCB = (details: any, callback: any) => {\n        // debug(\"onHeadersReceived\");\n        // debug(details);\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if ((serverUrl && details.url.startsWith(serverUrl)) ||\n            details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\")) {\n\n            callback({\n                responseHeaders: {\n                    ...details.responseHeaders,\n                    \"Content-Security-Policy\":\n                        // tslint:disable-next-line:max-line-length\n                        [`default-src 'self' 'unsafe-inline' 'unsafe-eval' data: http: https: ${READIUM2_ELECTRON_HTTP_PROTOCOL}: ${serverUrl}`],\n                },\n            });\n        } else {\n            callback({});\n        }\n    };\n\n    const onBeforeSendHeadersCB = (details: any, callback: any) => {\n        // debug(\"onBeforeSendHeaders\");\n        // debug(details);\n\n        // details.requestHeaders[\"User-Agent\"] = \"R2 Electron\";\n\n        if (!details.url) {\n            callback({});\n            return;\n        }\n\n        const serverUrl = server.serverUrl();\n\n        if (server.isSecured() &&\n            ((serverUrl && details.url.startsWith(serverUrl)) ||\n                details.url.startsWith(READIUM2_ELECTRON_HTTP_PROTOCOL + \"://\"))) {\n\n            const header = server.getSecureHTTPHeader(details.url);\n            if (header) {\n                details.requestHeaders[header.name] = header.value;\n            }\n            callback({ cancel: false, requestHeaders: details.requestHeaders });\n        } else {\n            callback({ cancel: false });\n        }\n    };\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#session\n    const setCertificateVerifyProcCB = (\n        request: ProcRequest,\n        callback: (verificationResult: number) => void) => {\n        // debug(\"setCertificateVerifyProc\");\n        // debug(request);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (request.hostname === info.urlHost) {\n                    callback(0); // OK\n                    return;\n                }\n            }\n        }\n        callback(-3); // Chromium\n        // callback(-2); // Fail\n    };\n\n    if (session.defaultSession) {\n        session.defaultSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        session.defaultSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        session.defaultSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    const webViewSession = getWebViewSession();\n    if (webViewSession) {\n        webViewSession.webRequest.onHeadersReceived(filter, onHeadersReceivedCB);\n        webViewSession.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeadersCB);\n        webViewSession.setCertificateVerifyProc(setCertificateVerifyProcCB);\n    }\n\n    app.on(\"certificate-error\", (event, _webContents, url, _error, _certificate, callback) => {\n        // debug(\"certificate-error\");\n        // debug(url);\n        // debug(error);\n        // debug(certificate);\n\n        if (server.isSecured()) {\n            const info = server.serverInfo();\n            if (info) {\n                // debug(info);\n                if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n                    // debug(\"certificate-error: BYPASS\");\n\n                    event.preventDefault();\n                    callback(true);\n                    return;\n                }\n            }\n        }\n\n        callback(false);\n    });\n\n    // app.on(\"select-client-certificate\", (event, _webContents, url, list, callback) => {\n    //     debug(\"select-client-certificate\");\n    //     debug(url);\n    //     debug(list);\n\n    //     if (server.isSecured()) {\n    //         const info = server.serverInfo();\n    //         if (info) {\n    //             debug(info);\n    //             if (url.indexOf(info.urlScheme + \"://\" + info.urlHost) === 0) {\n    //                 debug(\"select-client-certificate: BYPASS\");\n\n    //                 event.preventDefault();\n    //                 callback({ data: info.clientcert } as Certificate);\n    //                 return;\n    //             }\n    //         }\n    //     }\n\n    //     callback();\n    // });\n}\n\nconst httpProtocolHandler = (\n    request: HandlerRequest,\n    callback: (redirectRequest: CallbackRedirectRequest) => void) => {\n\n    // debug(\"httpProtocolHandler:\");\n    // debug(request.url);\n    // debug(request.referrer);\n    // debug(request.method);\n\n    const url = convertCustomSchemeToHttpUrl(request.url);\n\n    callback({\n        method: request.method,\n        // referrer: request.referrer,\n        // session: getWebViewSession() session.defaultSession\n        url,\n    });\n};\n\nexport function initSessions() {\n\n    // https://github.com/electron/electron/blob/v3.0.0/docs/api/breaking-changes.md#webframe\n    if ((protocol as any).registerStandardSchemes) {\n        (protocol as any).registerStandardSchemes([READIUM2_ELECTRON_HTTP_PROTOCOL], { secure: true });\n    } else {\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/electron/electron/blob/v5.0.0/docs/api/breaking-changes.md#privileged-schemes-registration\n        protocol.registerSchemesAsPrivileged([{\n            privileges: {\n                allowServiceWorkers: false,\n                bypassCSP: false,\n                corsEnabled: true,\n                secure: true,\n                standard: true,\n                supportFetchAPI: true,\n            },\n            scheme: READIUM2_ELECTRON_HTTP_PROTOCOL,\n        }]);\n    }\n\n    app.on(\"ready\", async () => {\n        debug(\"app ready\");\n\n        try {\n            await clearSessions();\n        } catch (err) {\n            debug(err);\n        }\n\n        // registered below (session.defaultSession.protocol === protocol)\n        // protocol.registerHttpProtocol(\n        //     READIUM2_ELECTRON_HTTP_PROTOCOL,\n        //     httpProtocolHandler,\n        //     (error: Error) => {\n        //         if (error) {\n        //             debug(error);\n        //         } else {\n        //             debug(\"registerHttpProtocol OKAY (protocol session)\");\n        //         }\n        //     });\n        if (session.defaultSession) {\n            session.defaultSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (default session)\");\n                    }\n                });\n        }\n        const webViewSession = getWebViewSession();\n        if (webViewSession) {\n            webViewSession.protocol.registerHttpProtocol(\n                READIUM2_ELECTRON_HTTP_PROTOCOL,\n                httpProtocolHandler,\n                (error: Error) => {\n                    if (error) {\n                        debug(error);\n                    } else {\n                        debug(\"registerHttpProtocol OKAY (webview session)\");\n                    }\n                });\n\n            webViewSession.setPermissionRequestHandler((wc, permission, callback) => {\n                debug(\"setPermissionRequestHandler\");\n                debug(wc.getURL());\n                debug(permission);\n                callback(true);\n            });\n        }\n    });\n\n    async function willQuitCallback(evt: Electron.Event) {\n        debug(\"app will quit\");\n        evt.preventDefault();\n\n        app.removeListener(\"will-quit\", willQuitCallback);\n\n        try {\n            await clearSessions();\n        } catch (err) {\n            debug(err);\n        }\n        debug(\"Cache and StorageData cleared, now quitting...\");\n        app.quit();\n    }\n\n    app.on(\"will-quit\", willQuitCallback);\n}\n\nexport async function clearSession(sess: Electron.Session, str: string): Promise<void> {\n\n    const prom1 = sess.clearCache();\n\n    const prom2 = sess.clearStorageData({\n        origin: \"*\",\n        quotas: [\n            \"temporary\",\n            \"persistent\",\n            \"syncable\",\n        ],\n        storages: [\n            \"appcache\",\n            // \"cookies\",\n            // \"filesystem\",\n            // \"indexdb\",\n            // \"localstorage\",\n            // \"shadercache\",\n            // \"websql\",\n            \"serviceworkers\",\n        ],\n    });\n\n    try {\n        const results = await promiseAllSettled<void>([prom1, prom2]);\n        for (const result of results) {\n            debug(`SESSION CACHE + STORAGE DATA CLEARED - ${str} => ${result.status}`);\n        }\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n\nexport function getWebViewSession() {\n    return session.fromPartition(R2_SESSION_WEBVIEW, { cache: true });\n}\n\nexport async function clearWebviewSession(): Promise<void> {\n    const sess = getWebViewSession();\n    if (sess) {\n        try {\n            await clearSession(sess, \"[\" + R2_SESSION_WEBVIEW + \"]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearDefaultSession(): Promise<void> {\n    if (session.defaultSession) {\n        try {\n            await clearSession(session.defaultSession, \"[default]\");\n        } catch (err) {\n            debug(err);\n        }\n    }\n\n    return Promise.resolve();\n}\n\nexport async function clearSessions(): Promise<void> {\n    try {\n        await promiseAllSettled([clearDefaultSession(), clearWebviewSession()]);\n    } catch (err) {\n        debug(err);\n    }\n\n    return Promise.resolve();\n}\n"]}