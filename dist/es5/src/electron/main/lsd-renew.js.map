{"version":3,"file":"lsd-renew.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-renew.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\r\nimport * as debug_ from \"debug\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\n\r\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\r\n\r\nimport URI = require(\"urijs\");\r\nimport URITemplate = require(\"urijs/src/URITemplate\");\r\n\r\nconst debug = debug_(\"r2:electron:main:lsd\");\r\n\r\nexport async function lsdRenew(\r\n    end: Date | undefined,\r\n    lsdJson: any,\r\n    deviceIDManager: IDeviceIDManager): Promise<any> {\r\n\r\n    if (!lsdJson.links) {\r\n        return Promise.reject(\"No LSD links!\");\r\n    }\r\n\r\n    const licenseRenew = lsdJson.links.find((link: any) => {\r\n        return link.rel === \"renew\";\r\n    });\r\n    if (!licenseRenew) {\r\n        return Promise.reject(\"No LSD renew link!\");\r\n    }\r\n\r\n    const deviceID = deviceIDManager.getDeviceID();\r\n    const deviceNAME = deviceIDManager.getDeviceNAME();\r\n\r\n    let renewURL = licenseRenew.href;\r\n    if (licenseRenew.templated === true || licenseRenew.templated === \"true\") {\r\n        const urlTemplate = new URITemplate(renewURL);\r\n        renewURL = (urlTemplate as any).expand({ end: \"xxx\", id: deviceID, name: deviceNAME }, { strict: false });\r\n\r\n        const renewURI = new URI(renewURL);\r\n        renewURI.search((data: any) => {\r\n            // overrides existing (leaves others intact)\r\n            data.end = end; // can be undefined\r\n        });\r\n        renewURL = renewURI.toString();\r\n\r\n        // url = url.replace(\"{?end,id,name}\", \"\"); // TODO: smarter regexp?\r\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\r\n    }\r\n    debug(\"RENEW: \" + renewURL);\r\n\r\n    return new Promise<any>(async (resolve, reject) => {\r\n\r\n        const failure = (err: any) => {\r\n            reject(err);\r\n        };\r\n\r\n        const success = async (response: request.RequestResponse) => {\r\n\r\n            Object.keys(response.headers).forEach((header: string) => {\r\n                debug(header + \" => \" + response.headers[header]);\r\n            });\r\n\r\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\r\n                failure(\"HTTP CODE \" + response.statusCode);\r\n                return;\r\n            }\r\n\r\n            let responseData: Buffer;\r\n            try {\r\n                responseData = await streamToBufferPromise(response);\r\n            } catch (err) {\r\n                reject(err);\r\n                return;\r\n            }\r\n            if (!responseData) {\r\n                return;\r\n            }\r\n            const responseStr = responseData.toString(\"utf8\");\r\n            debug(responseStr);\r\n            const responseJson = global.JSON.parse(responseStr);\r\n            debug(responseJson);\r\n\r\n            resolve(responseJson);\r\n        };\r\n\r\n        const headers = {\r\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\r\n        };\r\n\r\n        // No response streaming! :(\r\n        // https://github.com/request/request-promise/issues/90\r\n        const needsStreamingResponse = true;\r\n        if (needsStreamingResponse) {\r\n            request.put({\r\n                headers,\r\n                method: \"PUT\",\r\n                uri: renewURL,\r\n            })\r\n                .on(\"response\", success)\r\n                .on(\"error\", failure);\r\n        } else {\r\n            let response: requestPromise.FullResponse;\r\n            try {\r\n                // tslint:disable-next-line:await-promise no-floating-promises\r\n                response = await requestPromise({\r\n                    headers,\r\n                    method: \"PUT\",\r\n                    resolveWithFullResponse: true,\r\n                    uri: renewURL,\r\n                });\r\n            } catch (err) {\r\n                failure(err);\r\n                return;\r\n            }\r\n\r\n            await success(response);\r\n        }\r\n    });\r\n}\r\n"]}