{"version":3,"file":"readaloud.js","sourceRoot":"","sources":["../../../../../src/electron/renderer/readaloud.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport {\n    IEventPayload_R2_EVENT_TTS_CLICK_ENABLE, IEventPayload_R2_EVENT_TTS_DO_PLAY,\n    IEventPayload_R2_EVENT_TTS_PLAYBACK_RATE, R2_EVENT_READING_LOCATION, R2_EVENT_TTS_CLICK_ENABLE,\n    R2_EVENT_TTS_DOC_END, R2_EVENT_TTS_DO_NEXT, R2_EVENT_TTS_DO_PAUSE, R2_EVENT_TTS_DO_PLAY,\n    R2_EVENT_TTS_DO_PREVIOUS, R2_EVENT_TTS_DO_RESUME, R2_EVENT_TTS_DO_STOP, R2_EVENT_TTS_IS_PAUSED,\n    R2_EVENT_TTS_IS_PLAYING, R2_EVENT_TTS_IS_STOPPED, R2_EVENT_TTS_PLAYBACK_RATE,\n} from \"../common/events\";\nimport { getCurrentReadingLocation, navLeftOrRight } from \"./location\";\nimport { isRTL } from \"./readium-css\";\nimport { IReadiumElectronBrowserWindow, IReadiumElectronWebview } from \"./webview/state\";\n\n// import * as debug_ from \"debug\";\n// const debug = debug_(\"r2:navigator#electron/renderer/index\");\n// const IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nconst win = window as IReadiumElectronBrowserWindow;\n\nlet _lastTTSWebView: IReadiumElectronWebview | undefined;\n\nexport function ttsHandleIpcMessage(\n    eventChannel: string,\n    _eventArgs: any[],\n    eventCurrentTarget: IReadiumElectronWebview): boolean {\n\n    if (eventChannel === R2_EVENT_TTS_IS_PAUSED) {\n        _lastTTSWebView = eventCurrentTarget;\n        if (_ttsListener) {\n            _ttsListener(TTSStateEnum.PAUSED);\n        }\n    } else if (eventChannel === R2_EVENT_TTS_IS_STOPPED) {\n        _lastTTSWebView = undefined;\n        if (_ttsListener) {\n            _ttsListener(TTSStateEnum.STOPPED);\n        }\n    } else if (eventChannel === R2_EVENT_TTS_IS_PLAYING) {\n        _lastTTSWebView = eventCurrentTarget;\n        if (_ttsListener) {\n            _ttsListener(TTSStateEnum.PLAYING);\n        }\n    } else if (eventChannel === R2_EVENT_TTS_DOC_END) {\n        const nextSpine = navLeftOrRight(isRTL(), true, true);\n        if (nextSpine) {\n            setTimeout(() => {\n                const activeWebView = win.READIUM2.getActiveWebViews().find((webview) => {\n                    return webview.READIUM2.link?.Href === nextSpine.Href;\n                });\n                if (activeWebView) {\n                    let done = false;\n                    const cb = (event: Electron.IpcMessageEvent) => {\n                        if (event.channel === R2_EVENT_READING_LOCATION) {\n                            const webview = event.currentTarget as IReadiumElectronWebview;\n                            if (webview !== activeWebView) {\n                                console.log(\"Wrong navigator webview?!\");\n                                return;\n                            }\n                            done = true;\n                            activeWebView.removeEventListener(\"ipc-message\", cb);\n                            if (activeWebView.READIUM2.link?.Href === nextSpine.Href) {\n                                ttsPlay(win.READIUM2.ttsPlaybackRate);\n                            }\n                        }\n                    };\n                    setTimeout(() => {\n                        if (done) {\n                            return;\n                        }\n                        try {\n                            activeWebView.removeEventListener(\"ipc-message\", cb);\n                        } catch (err) {\n                            console.log(err);\n                        }\n                    }, 1000);\n                    activeWebView.addEventListener(\"ipc-message\", cb);\n                }\n            }, 200);\n        }\n    } else {\n        return false;\n    }\n    // else if (eventChannel === R2_EVENT_TTS_PLAYBACK_RATE) {\n    //     // debug(\"R2_EVENT_TTS_PLAYBACK_RATE (webview.addEventListener('ipc-message')\");\n    //     const payload = eventArgs[0] as IEventPayload_R2_EVENT_TTS_PLAYBACK_RATE;\n    //     setCurrentTTSPlaybackRate(payload.speed);\n    // }\n    return true;\n}\n\nexport enum TTSStateEnum {\n    PAUSED = \"PAUSED\",\n    PLAYING = \"PLAYING\",\n    STOPPED = \"STOPPED\",\n}\nlet _ttsListener: ((ttsState: TTSStateEnum) => void) | undefined;\nexport function ttsListen(ttsListener: (ttsState: TTSStateEnum) => void) {\n    _ttsListener = ttsListener;\n}\n\nexport function ttsPlay(speed: number) {\n    if (win.READIUM2) {\n        win.READIUM2.ttsPlaybackRate = speed;\n    }\n\n    let startElementCSSSelector: string | undefined;\n    const loc = getCurrentReadingLocation();\n\n    let activeWebView = win.READIUM2.getActiveWebViews().find((webview) => {\n        return loc && loc.locator.href && loc.locator.href === webview.READIUM2.link?.Href;\n    });\n    if (loc && activeWebView) {\n        startElementCSSSelector = loc.locator.locations.cssSelector;\n    }\n    if (!activeWebView) {\n        activeWebView = win.READIUM2.getFirstWebView();\n    }\n    _lastTTSWebView = activeWebView;\n    if (!activeWebView) {\n        return;\n    }\n\n    const payload: IEventPayload_R2_EVENT_TTS_DO_PLAY = {\n        rootElement: \"html > body\", // window.document.body\n        speed,\n        startElement: startElementCSSSelector,\n    };\n\n    setTimeout(async () => {\n        if (activeWebView) {\n            await activeWebView.send(R2_EVENT_TTS_DO_PLAY, payload);\n        }\n    }, 0);\n}\n\nexport function ttsPause() {\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        if (_lastTTSWebView && _lastTTSWebView !== activeWebView) {\n            continue;\n        }\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_DO_PAUSE);\n        }, 0);\n    }\n}\nexport function ttsStop() {\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        if (_lastTTSWebView && _lastTTSWebView !== activeWebView) {\n            continue;\n        }\n        _lastTTSWebView = undefined;\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_DO_STOP);\n        }, 0);\n    }\n}\nexport function ttsResume() {\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        if (_lastTTSWebView && _lastTTSWebView !== activeWebView) {\n            continue;\n        }\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_DO_RESUME);\n        }, 0);\n    }\n}\nexport function ttsPrevious() {\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        if (_lastTTSWebView && _lastTTSWebView !== activeWebView) {\n            continue;\n        }\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_DO_PREVIOUS);\n        }, 0);\n    }\n}\nexport function ttsNext() {\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        if (_lastTTSWebView && _lastTTSWebView !== activeWebView) {\n            continue;\n        }\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_DO_NEXT);\n        }, 0);\n    }\n}\n\nexport function ttsClickEnable(doEnable: boolean) {\n    if (win.READIUM2) {\n        win.READIUM2.ttsClickEnabled = doEnable;\n    }\n\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        setTimeout(async () => {\n            const payload: IEventPayload_R2_EVENT_TTS_CLICK_ENABLE = {\n                doEnable,\n            };\n\n            setTimeout(async () => {\n                await activeWebView.send(R2_EVENT_TTS_CLICK_ENABLE, payload);\n            }, 0);\n        }, 0);\n    }\n}\n\nexport function ttsPlaybackRate(speed: number) {\n    if (win.READIUM2) {\n        win.READIUM2.ttsPlaybackRate = speed;\n    }\n\n    const activeWebViews = win.READIUM2.getActiveWebViews();\n    for (const activeWebView of activeWebViews) {\n        const payload: IEventPayload_R2_EVENT_TTS_PLAYBACK_RATE = {\n            speed,\n        };\n        setTimeout(async () => {\n            await activeWebView.send(R2_EVENT_TTS_PLAYBACK_RATE, payload);\n        }, 0);\n    }\n}\n"]}