{"version":3,"file":"service-worker.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/sw/service-worker.ts"],"names":[],"mappings":";AAUA,iBAkEA;AAlEA,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAQ9B,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAO,MAAM;;;;gBAC1C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBACzC,WAAO,IAAY,CAAC,WAAW,EAAE,EAAA;;gBAAjC,SAAiC,CAAC;;;;KACrC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAC,KAAU;IACzC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IACxC,KAAK,CAAC,SAAS,CAAE,IAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAU;IACtC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAGvC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC/B,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,IAAS,EAAE,IAAS;QAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAOH,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAClC,IAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AA+BpC,CAAC,CAAC,CAAC","sourcesContent":["/// <referencexx path='../../../node_modules/typescript/lib/lib.es2015.d.ts' />\r\n/// <referencexx path='../../../node_modules/typescript/lib/lib.webworker.d.ts' />\r\n/// <referencexx path='../../../node_modules/typescript/lib/lib.dom.d.ts' />\r\n// tslint:disablexx:no-reference\r\n// import { ServiceWorkerGlobalScope } from \"../../../node_modules/typescript/lib/lib.webworker.d.ts\";\r\n// const { clients, addEventListener, skipWaiting, registration } = self as ServiceWorkerGlobalScope;\r\n// (function (self: ServiceWorkerGlobalScope) {\r\n//     //Service worker contents...\r\n//  })(<ServiceWorkerGlobalScope>self);\r\n\r\nconsole.log(\"SERVICE WORKER\");\r\n\r\n// self.addEventListener('message', function (event) {\r\n//     if (event.data.action == 'skipWaiting') {\r\n//         self.skipWaiting()\r\n//     }\r\n// });\r\n\r\nself.addEventListener(\"install\", async (_event) => {\r\n    console.log(\"service-worker.js INSTALL\");\r\n    await (self as any).skipWaiting();\r\n});\r\n\r\nself.addEventListener(\"activate\", (event: any) => {\r\n    console.log(\"service-worker.js ACTIVE\");\r\n    event.waitUntil((self as any).clients.claim());\r\n});\r\n\r\nself.addEventListener(\"fetch\", (event: any) => {\r\n    console.log(\"service-worker.js FETCH\");\r\n\r\n    // console.log(event.request);\r\n    console.log(event.request.url);\r\n    event.request.headers.forEach((arg0: any, arg1: any) => {\r\n        console.log(arg0 + \" => \" + arg1);\r\n    });\r\n\r\n    //   var mode = event.request.mode;\r\n    //   if (mode === \"navigate\") {\r\n    //     mode = \"cors\";\r\n    //   }\r\n\r\n    const req = event.request.clone();\r\n    const fetchPromise = fetch(req);\r\n    event.respondWith(fetchPromise);\r\n\r\n    // if (event.request.url.indexOf(\"/pub/*-\") >= 0\r\n    //     || event.request.url.endsWith(\"manifest.json\")\r\n    //     || event.request.url.endsWith(\"/\")) {\r\n    //     const req = event.request.clone();\r\n    //     const fetchPromise = fetch(req);\r\n    //     event.respondWith(fetchPromise);\r\n    // } else {\r\n    //     console.log(\"re-fetching with LCP user pass ...\");\r\n    //     const newUrl = event.request.url.replace(\"/pub/\",\r\n    //         \"/pub/*-ZWM0ZjJkYmIzYjE0MDA5NTU1MGM5YWZiYmI2OWI1ZDZmZDllODE0YjlkYTgyZmFkMGIzNGU5ZmNiZTU2ZjFjYg==-*\");\r\n    //     const fetchPromise = fetch(newUrl);\r\n    //     event.respondWith(fetchPromise);\r\n    // }\r\n\r\n    // // tslint:disable-next-line:no-floating-promises\r\n    // (async () => {\r\n    //     try {\r\n    //         const response = await fetch(req);\r\n    //         if (!response.ok) {\r\n    //             console.log(\"BAD FETCH RESPONSE?!\");\r\n    //         }\r\n    //         response.headers.forEach(function () { console.log(arguments[1] + \" => \" + arguments[0]); });\r\n\r\n    //         var blob = await response.arrayBuffer\r\n    //         ...\r\n    //     } catch (e) {\r\n    //         console.log(e);\r\n    //     }\r\n    // })();\r\n});\r\n"]}