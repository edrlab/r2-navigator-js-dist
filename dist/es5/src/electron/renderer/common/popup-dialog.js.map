{"version":3,"file":"popup-dialog.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/common/popup-dialog.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as tabbable from \"tabbable\";\n\nimport { POPUP_DIALOG_CLASS } from \"../../common/styles\";\n\nexport interface IHTMLDialogElementWithPopup extends HTMLDialogElement {\n    popDialog: PopupDialog | undefined;\n}\n\nexport function isPopupDialogOpen(documant: Document): boolean {\n    return documant.documentElement &&\n        documant.documentElement.classList.contains(POPUP_DIALOG_CLASS);\n}\n\nexport function closePopupDialogs(documant: Document) {\n    const dialogs = documant.querySelectorAll(`dialog.${POPUP_DIALOG_CLASS}`);\n    dialogs.forEach((dialog) => {\n        const dia = dialog as IHTMLDialogElementWithPopup;\n        if (dia.popDialog) {\n            dia.popDialog.cancelRefocus();\n        }\n        if (dia.hasAttribute(\"open\")) {\n            dia.close();\n        }\n        setTimeout(() => {\n            dia.remove();\n        }, 50);\n    });\n}\n\nexport function isElementInsidePopupDialog(el: Element): boolean {\n\n    let currentElement = el;\n\n    while (currentElement && currentElement.nodeType === Node.ELEMENT_NODE) {\n        if (currentElement.tagName && currentElement.classList &&\n            currentElement.tagName.toLowerCase() === \"dialog\" &&\n            currentElement.classList.contains(POPUP_DIALOG_CLASS)) {\n            return true;\n        }\n        currentElement = currentElement.parentNode as Element;\n    }\n\n    return false;\n}\n\nfunction getFocusables(rootElement: Element): HTMLOrSVGElement[] {\n    // const FOCUSABLE_ELEMENTS = [\n    //     \"a[href]:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"area[href]:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"input:not([disabled]):not([inert])\",\n    //     \"select:not([disabled]):not([inert])\",\n    //     \"textarea:not([disabled]):not([inert])\",\n    //     \"button:not([disabled]):not([inert])\",\n    //     \"iframe:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"audio:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"video:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"[contenteditable]:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    //     \"[tabindex]:not([tabindex^=\\\"-\\\"]):not([inert])\",\n    // ];\n\n    // const focusables: HTMLOrSVGElement[] = [];\n    // const focusableElements = rootElement.querySelectorAll(FOCUSABLE_ELEMENTS.join(\",\"));\n    // focusableElements.forEach((focusableElement) => {\n\n    //     if ((focusableElement as HTMLElement).offsetWidth ||\n    //         (focusableElement as HTMLElement).offsetHeight ||\n    //         focusableElement.getClientRects().length) {\n\n    //         focusables.push((focusableElement as unknown) as HTMLOrSVGElement); // weird TypeScript!\n    //     }\n    // });\n    // return focusables;\n\n    const tabbables = tabbable(rootElement);\n    return tabbables;\n}\nfunction focusInside(rootElement: Element) {\n    const toFocus = rootElement.querySelector(\"[autofocus]\") || getFocusables(rootElement)[0];\n    if (toFocus) {\n        (toFocus as HTMLOrSVGElement).focus();\n    }\n}\n\n// interface IEventMap { [key: string]: Array<() => void>; }\n\nlet _focusedBeforeDialog: HTMLOrSVGElement | null;\n\nfunction onKeyUp(this: PopupDialog, ev: KeyboardEvent) {\n    // if (!this.shown) {\n    //     return;\n    // }\n\n    const ESCAPE_KEY = 27;\n    if (ev.which === ESCAPE_KEY) {\n        if (this.role !== \"alertdialog\") {\n            ev.preventDefault();\n            this.dialog.close();\n            return;\n        }\n    }\n}\n\nfunction onKeyDown(this: PopupDialog, ev: KeyboardEvent) {\n    // if (!this.shown) {\n    //     return;\n    // }\n\n    const TAB_KEY = 9;\n    if (ev.which === TAB_KEY) {\n\n        // if (ev.shiftKey && _focusedBeforeDialog) {\n        //     this.focusScroll(_focusedBeforeDialog, false);\n        // }\n\n        const focusables = getFocusables(this.dialog);\n\n        const focusedItemIndex = this.documant.activeElement ?\n            focusables.indexOf((this.documant.activeElement as unknown) as HTMLOrSVGElement) : // weird TypeScript!\n            -1;\n\n        const isLast = focusedItemIndex === focusables.length - 1;\n        const isFirst = focusedItemIndex === 0;\n\n        let toFocus: HTMLOrSVGElement | undefined;\n\n        if (ev.shiftKey && isFirst) {\n            toFocus = focusables[focusables.length - 1];\n        } else if (!ev.shiftKey && isLast) {\n            toFocus = focusables[0];\n        }\n\n        if (toFocus) {\n            ev.preventDefault();\n            toFocus.focus();\n        }\n    }\n}\n\n// function onFocus(this: PopupDialog, ev: Event) {\n//     // if (!this.shown) {\n//     //     return;\n//     // }\n\n//     if (!this.dialog.contains(ev.target as Node)) {\n//         ev.preventDefault();\n//         focusInside(this.dialog);\n//     }\n// }\n\nexport class PopupDialog {\n\n    public readonly role: string;\n    public readonly dialog: IHTMLDialogElementWithPopup;\n\n    private readonly _onKeyUp: () => void;\n    private readonly _onKeyDown: () => void;\n    // private readonly _onFocus: () => void;\n\n    // private shown: boolean;\n    // private listeners: IEventMap;\n\n    constructor(\n        public readonly documant: Document,\n        outerHTML: string,\n        // id: string,\n        public readonly onDialogClosed: (el: HTMLOrSVGElement | null) => void) {\n\n        closePopupDialogs(documant);\n\n        const that = this;\n\n        this._onKeyUp = onKeyUp.bind(this);\n        this._onKeyDown = onKeyDown.bind(this);\n        // this._onFocus = onFocus.bind(this);\n\n        this.dialog = documant.createElement(\"dialog\") as IHTMLDialogElementWithPopup;\n        this.dialog.popDialog = this;\n\n        this.dialog.setAttribute(\"class\", POPUP_DIALOG_CLASS);\n        this.dialog.setAttribute(\"id\", POPUP_DIALOG_CLASS);\n        this.dialog.setAttribute(\"dir\", \"ltr\");\n\n        // const button = documant.createElement(\"button\");\n        // button.setAttribute(\"aria-label\", \"close\");\n        // button.setAttribute(\"class\", FOOTNOTES_CLOSE_BUTTON_CLASS);\n        // const txtClose = documant.createTextNode(\"X\");\n        // button.appendChild(txtClose);\n        // button.addEventListener(\"click\", (_ev: Event) => {\n        // if (that.dialog.hasAttribute(\"open\")) {\n        //     that.dialog.close();\n        // }\n        // });\n        // this.dialog.appendChild(button);\n\n        try {\n            this.dialog.insertAdjacentHTML(\"beforeend\", outerHTML);\n        } catch (err) {\n            console.log(err);\n            console.log(outerHTML);\n            try {\n                this.dialog.innerHTML = outerHTML;\n                // this.dialog.insertAdjacentHTML(\"afterbegin\", button.outerHTML);\n            } catch (err) {\n                console.log(err);\n                console.log(outerHTML);\n            }\n        }\n\n        // const input = documant.createElement(\"input\");\n        // input.setAttribute(\"type\", \"text\");\n        // this.dialog.appendChild(input);\n\n        // const butt = documant.createElement(\"button\");\n        // butt.appendChild(documant.createTextNode(\"TEST FOCUS CYCLE\"));\n        // this.dialog.appendChild(butt);\n\n        // const buttx = documant.createElement(\"a\");\n        // buttx.setAttribute(\"href\", \"http://domain.org\");\n        // buttx.appendChild(documant.createTextNode(\"TEST OTHER\"));\n        // this.dialog.appendChild(buttx);\n\n        documant.body.appendChild(this.dialog);\n        // debug(this.dialog.outerHTML);\n\n        this.dialog.addEventListener(\"click\", (ev) => {\n            if (ev.target !== that.dialog) {\n                return;\n            }\n            const rect = that.dialog.getBoundingClientRect();\n            const inside = rect.top <= ev.clientY &&\n                ev.clientY <= rect.top + rect.height &&\n                rect.left <= ev.clientX &&\n                ev.clientX <= rect.left + rect.width;\n            if (!inside) {\n                if (that.dialog.hasAttribute(\"open\")) {\n                    that.dialog.close();\n                }\n            }\n        });\n\n        this.dialog.addEventListener(\"close\", (_ev) => {\n            that.hide();\n        });\n\n        this.documant = this.dialog.ownerDocument as Document;\n\n        this.role = this.dialog.getAttribute(\"role\") || \"dialog\";\n\n        // this.shown = this.dialog.hasAttribute(\"open\");\n\n        // this.listeners = {};\n    }\n\n    // public on(type: string, handler: () => void) {\n    //     if (!this.listeners[type]) {\n    //         this.listeners[type] = [];\n    //     }\n\n    //     this.listeners[type].push(handler);\n\n    //     return this;\n    // }\n\n    // public off(type: string, handler: () => void) {\n    //     const index = this.listeners[type].indexOf(handler);\n    //     if (index >= 0) {\n    //         this.listeners[type].splice(index, 1);\n    //     }\n    //     return this;\n    // }\n\n    public show(toRefocus: Element | undefined) {\n        // if (this.shown) {\n        //     return;\n        // }\n        // this.shown = true;\n\n        const el = this.documant.documentElement;\n        el.classList.add(POPUP_DIALOG_CLASS);\n\n        if (this.dialog.hasAttribute(\"open\")) {\n            return;\n        }\n\n        _focusedBeforeDialog = toRefocus ?\n            toRefocus as HTMLElement :\n            (this.documant.activeElement as unknown) as HTMLOrSVGElement; // weird TypeScript\n\n        this.dialog.showModal();\n\n        focusInside(this.dialog);\n\n        // this.documant.body.addEventListener(\"focus\", this._onFocus, true);\n        this.documant.body.addEventListener(\"keyup\", this._onKeyUp, true);\n        this.documant.body.addEventListener(\"keydown\", this._onKeyDown, true);\n\n        // this.fire(\"show\");\n    }\n\n    public cancelRefocus() {\n        _focusedBeforeDialog = null;\n    }\n\n    public hide() {\n        // if (!this.shown) {\n        //     return;\n        // }\n        // this.shown = false;\n\n        const el = this.documant.documentElement;\n        el.classList.remove(POPUP_DIALOG_CLASS);\n\n        // this.documant.body.removeEventListener(\"focus\", this._onFocus, true);\n        this.documant.body.removeEventListener(\"keyup\", this._onKeyUp, true);\n        this.documant.body.removeEventListener(\"keydown\", this._onKeyDown, true);\n\n        this.onDialogClosed(_focusedBeforeDialog);\n        _focusedBeforeDialog = null;\n\n        // let the above occur even if not open!\n        if (this.dialog.hasAttribute(\"open\")) {\n            this.dialog.close();\n        }\n\n        // this.fire(\"hide\");\n    }\n\n    // public destroy() {\n    //     this.hide();\n\n    //     // this.fire(\"destroy\");\n\n    //     // this.listeners = {};\n    // }\n\n    // private fire(type: string) {\n    //     if (!this.listeners[type]) {\n    //         return;\n    //     }\n    //     this.listeners[type].forEach((listener) => {\n    //         listener();\n    //     });\n    // }\n}\n"]}