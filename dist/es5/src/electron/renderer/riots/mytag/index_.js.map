{"version":3,"file":"index_.js","sourceRoot":"","sources":["../../../../../../../src/electron/renderer/riots/mytag/index_.ts"],"names":[],"mappings":";;AAEA,oEAAmE;AAEtD,QAAA,cAAc,GAAG,UAAC,IAAS;IACpC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAEjB,MAAM,CAAC,GAAG,CAAC;AACf,CAAC,CAAC;AAGD,MAAc,CAAC,UAAU,GAAG,UAAU,IAAS;IAAnB,iBA4C5B;IA3CG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAElB,IAAM,IAAI,GAAG,IAAe,CAAC;IAE7B,IAAI,CAAC,KAAK,CAAC,+CAAsB,CAAC,CAAC;IAEnC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;IACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAMxB,IAAI,CAAC,aAAa,GAAG,UAAC,EAAa;QAC/B,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAE5B,EAAE,CAAC,aAAa,GAAG,IAAI,CAAC;QACxB,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,QAAwB,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC5D,UAAU,CAAC;YAEP,IAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC,CAAC;IACF,IAAI,CAAC,cAAc,GAAG,UAAC,EAAa;QAChC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,QAAwB,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC5D,EAAE,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;QACpD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,GAAG,UAAC,IAAS,EAAE,QAAa;QACzC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["// http://riotjs.com/guide/\r\n// http://riotjs.com/api/\r\nimport { riot_mixin_EventTracer } from \"../riot_mixin_EventTracer\";\r\n\r\nexport const riotMountMyTag = (opts: any): RiotTag[] => {\r\n    const tag = riot.mount(\"riot-mytag\", opts);\r\n    console.log(tag); // RiotTag[]\r\n    // console.log((tag[0] as any).getOpts()); // see RiotMixinWithOpts\r\n    return tag;\r\n};\r\n\r\n// tslint:disable-next-line:space-before-function-paren\r\n(window as any).riot_mytag = function (opts: any) {\r\n    console.log(opts);\r\n    console.log(this);\r\n\r\n    const that = this as RiotTag;\r\n\r\n    that.mixin(riot_mixin_EventTracer);\r\n\r\n    this.prop1 = \"val1\";\r\n    this.applyClazz = false;\r\n\r\n    // ev.currentTarget (where event handler is attached)\r\n    // ev.target (originating element)\r\n    // ev.which (keyboard)\r\n    // ev.item (loop)\r\n    this.onclickButton = (ev: RiotEvent) => {\r\n        console.log(\"CLICK button\");\r\n        // applyClazz will not be taken into account immediately (no automatic call to update()\r\n        ev.preventUpdate = true;\r\n        this.applyClazz = false;\r\n        (that.refs.testSpan as HTMLElement).style.fontSize = \"100%\";\r\n        setTimeout(() => {\r\n            // (window as any).riot.update();\r\n            that.update();\r\n        }, 1000);\r\n    };\r\n    this.onclickHeading = (ev: RiotEvent) => {\r\n        console.log(\"CLICK heading\");\r\n        this.applyClazz = true;\r\n        (that.refs.testSpan as HTMLElement).style.fontSize = \"200%\";\r\n        ev.preventDefault();\r\n    };\r\n\r\n    this.on(\"mount\", () => {\r\n        console.log(that.root.id);\r\n        console.log(document.getElementById(\"myRiotTagID\"));\r\n        console.log(that.root.querySelectorAll(\"button\")[0]);\r\n    });\r\n\r\n    that.shouldUpdate = (data: any, nextOpts: any) => {\r\n        console.log(data);\r\n        console.log(nextOpts);\r\n        return true;\r\n    };\r\n};\r\n"]}