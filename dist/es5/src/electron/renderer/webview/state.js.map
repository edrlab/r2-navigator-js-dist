{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/webview/state.ts"],"names":[],"mappings":"","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\n\nimport {\n    IEventPayload_R2_EVENT_CLIPBOARD_COPY, IEventPayload_R2_EVENT_READING_LOCATION,\n    IEventPayload_R2_EVENT_READIUMCSS,\n} from \"../../common/events\";\nimport { WebViewSlotEnum } from \"../../common/styles\";\nimport { IStringMap } from \"../common/querystring\";\n\nexport interface IReadiumElectronWebviewWindowState {\n    // init'ed from  win.location.search immediately in preload.js\n    // updated in R2_EVENT_SCROLLTO IPC renderer event\n    urlQueryParams: IStringMap | undefined;\n\n    hashElement: Element | null;\n    locationHashOverride: Element | undefined;\n    locationHashOverrideInfo: IEventPayload_R2_EVENT_READING_LOCATION | undefined;\n\n    isAudio: boolean;\n\n    isFixedLayout: boolean;\n    fxlViewportWidth: number;\n    fxlViewportHeight: number;\n    fxlViewportScale: number;\n    webViewSlot: WebViewSlotEnum;\n\n    DEBUG_VISUALS: boolean;\n\n    ttsClickEnabled: boolean;\n    ttsOverlayEnabled: boolean;\n    ttsPlaybackRate: number;\n    ttsVoice: SpeechSynthesisVoice | null;\n\n    isClipboardIntercept: boolean;\n}\nexport interface IReadiumElectronWebviewWindow extends Window {\n    READIUM2: IReadiumElectronWebviewWindowState;\n}\n\nexport interface IReadiumElectronWebviewState {\n    id: number;\n    link: Link | undefined;\n    forceRefresh?: boolean;\n\n    readiumCss: IEventPayload_R2_EVENT_READIUMCSS | undefined;\n}\nexport interface IReadiumElectronWebview extends Electron.WebviewTag {\n    READIUM2: IReadiumElectronWebviewState;\n}\n\nexport interface IReadiumElectronBrowserWindowState {\n    publication: Publication;\n    publicationURL: string;\n\n    sessionInfo: string | undefined;\n\n    domRootElement: HTMLElement;\n    domSlidingViewport: HTMLElement;\n\n    DEBUG_VISUALS: boolean;\n\n    ttsClickEnabled: boolean;\n    ttsOverlayEnabled: boolean;\n    ttsPlaybackRate: number;\n    ttsVoice: SpeechSynthesisVoice | null;\n\n    clipboardInterceptor: ((data: IEventPayload_R2_EVENT_CLIPBOARD_COPY) => void) | undefined;\n\n    preloadScriptPath: string;\n\n    getFirstWebView: () => IReadiumElectronWebview | undefined;\n    destroyFirstWebView: () => void;\n    createFirstWebView: () => void;\n\n    getSecondWebView: (create: boolean) => IReadiumElectronWebview | undefined;\n    destroySecondWebView: () => void;\n    createSecondWebView: () => void;\n\n    getFirstOrSecondWebView: () => IReadiumElectronWebview | undefined;\n\n    getActiveWebViews: () => IReadiumElectronWebview[];\n\n    enableScreenReaderAccessibilityWebViewHardRefresh: boolean;\n    isScreenReaderMounted: boolean;\n}\n\nexport interface IWithReadiumElectronBrowserWindowState {\n    READIUM2: IReadiumElectronBrowserWindowState;\n}\nexport type TWindow = typeof window;\nexport type IReadiumElectronBrowserWindow = TWindow & IWithReadiumElectronBrowserWindowState;\n"]}